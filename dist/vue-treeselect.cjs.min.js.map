{"version":3,"sources":["webpack://VueTreeselect/webpack/bootstrap","webpack://VueTreeselect/external \"@babel/runtime/helpers/defineProperty\"","webpack://VueTreeselect/external \"babel-helper-vue-jsx-merge-props\"","webpack://VueTreeselect/external \"@babel/runtime/helpers/toConsumableArray\"","webpack://VueTreeselect/external \"lodash/noop\"","webpack://VueTreeselect/external \"lodash/debounce\"","webpack://VueTreeselect/external \"is-promise\"","webpack://VueTreeselect/external \"lodash/once\"","webpack://VueTreeselect/external \"lodash/identity\"","webpack://VueTreeselect/external \"lodash/constant\"","webpack://VueTreeselect/external \"lodash/last\"","webpack://VueTreeselect/external \"@babel/runtime/helpers/slicedToArray\"","webpack://VueTreeselect/external \"fuzzysearch\"","webpack://VueTreeselect/external \"watch-size\"","webpack://VueTreeselect/external \"@babel/runtime/helpers/typeof\"","webpack://VueTreeselect/external \"vue\"","webpack://VueTreeselect/./src/utils/warning.js","webpack://VueTreeselect/./src/utils/onLeftClick.js","webpack://VueTreeselect/./src/utils/scrollIntoView.js","webpack://VueTreeselect/./src/utils/watchSize.js","webpack://VueTreeselect/./src/utils/removeFromArray.js","webpack://VueTreeselect/./src/utils/setupResizeAndScrollEventListeners.js","webpack://VueTreeselect/./src/utils/isNaN.js","webpack://VueTreeselect/./src/utils/createMap.js","webpack://VueTreeselect/./src/utils/deepExtend.js","webpack://VueTreeselect/./src/utils/includes.js","webpack://VueTreeselect/./src/utils/find.js","webpack://VueTreeselect/./src/utils/quickDiff.js","webpack://VueTreeselect/./src/constants.js","webpack://VueTreeselect/./src/mixins/treeselectMixin.js","webpack://VueTreeselect/src/components/HiddenFields.vue","webpack://VueTreeselect/./node_modules/vue-loader/lib/runtime/componentNormalizer.js","webpack://VueTreeselect/./src/components/HiddenFields.vue","webpack://VueTreeselect/src/components/Input.vue","webpack://VueTreeselect/./src/components/Input.vue","webpack://VueTreeselect/./src/components/Placeholder.vue","webpack://VueTreeselect/src/components/Placeholder.vue","webpack://VueTreeselect/./src/components/SingleValue.vue","webpack://VueTreeselect/src/components/SingleValue.vue","webpack://VueTreeselect/./src/components/icons/Delete.vue?adc1","webpack://VueTreeselect/src/components/icons/Delete.vue","webpack://VueTreeselect/./src/components/icons/Delete.vue","webpack://VueTreeselect/./src/components/MultiValueItem.vue","webpack://VueTreeselect/src/components/MultiValueItem.vue","webpack://VueTreeselect/./src/components/MultiValue.vue","webpack://VueTreeselect/src/components/MultiValue.vue","webpack://VueTreeselect/./src/components/icons/Arrow.vue?a963","webpack://VueTreeselect/src/components/icons/Arrow.vue","webpack://VueTreeselect/src/components/Option.vue","webpack://VueTreeselect/./src/components/icons/Arrow.vue","webpack://VueTreeselect/./src/components/Control.vue","webpack://VueTreeselect/src/components/Control.vue","webpack://VueTreeselect/./src/components/Tip.vue","webpack://VueTreeselect/src/components/Tip.vue","webpack://VueTreeselect/./src/components/Option.vue","webpack://VueTreeselect/src/components/Menu.vue","webpack://VueTreeselect/./src/components/Menu.vue","webpack://VueTreeselect/src/components/MenuPortal.vue","webpack://VueTreeselect/./src/components/MenuPortal.vue","webpack://VueTreeselect/./src/components/Treeselect.vue","webpack://VueTreeselect/src/components/Treeselect.vue","webpack://VueTreeselect/./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","warning","noop","onLeftClick","mouseDownHandler","evt","type","button","args","this","scrollIntoView","$scrollingEl","$focusedEl","scrollingReact","getBoundingClientRect","focusedRect","overScroll","offsetHeight","bottom","scrollTop","Math","min","offsetTop","clientHeight","scrollHeight","top","max","intervalId","removeFromArray","arr","elem","idx","indexOf","splice","registered","test","item","$el","listener","lastWidth","lastHeight","width","offsetWidth","height","watchSizeForIE9","push","setInterval","forEach","length","clearInterval","watchSize","isIE9","document","documentMode","locked","removeSizeWatcher","watchSizeForBrowsersOtherThanIE9","isScrollElment","getComputedStyle","overflow","overflowX","overflowY","setupResizeAndScrollEventListeners","$scrollParents","$parent","parentNode","nodeName","nodeType","ELEMENT_NODE","window","findScrollParents","addEventListener","passive","scrollParent","removeEventListener","$scrollParent","isNaN","x","createMap","isPlainObject","getPrototypeOf","deepExtend","target","source","keys","len","obj","includes","arrOrStr","find","predicate","ctx","quickDiff","arrA","arrB","LOAD_ROOT_OPTIONS","LOAD_CHILDREN_OPTIONS","ASYNC_SEARCH","KEY_CODES","sortValueByIndex","a","b","level","index","match","enableFuzzyMatch","needle","haystack","fuzzysearch","getErrorMessage","err","message","String","instanceId","provide","instance","props","allowClearingDisabled","Boolean","default","allowSelectingDisabledDescendants","alwaysOpen","appendToBody","async","autoFocus","autoLoadRootOptions","autoDeselectAncestors","autoDeselectDescendants","autoSelectAncestors","autoSelectDescendants","backspaceRemoves","beforeClearAll","Function","constant","branchNodesFirst","cacheOptions","clearable","clearAllText","clearOnSelect","clearValueText","closeOnSelect","defaultExpandLevel","Number","defaultOptions","deleteRemoves","delimiter","flattenSearchResults","disableBranchNodes","disabled","disableFuzzyMatching","flat","isPaginated","joinValues","limit","Infinity","limitText","count","loadingText","loadOptions","matchKeys","Array","maxHeight","multiple","noChildrenText","noOptionsText","noResultsText","normalizer","identity","openDirection","validator","openOnClick","openOnFocus","options","placeholder","required","retryText","retryTitle","searchable","searchNested","searchPromptText","showCount","showCountOf","showCountOnSearch","sortValueBy","tabIndex","valueConsistsOf","valueFormat","zIndex","data","trigger","isFocused","searchQuery","menu","isOpen","current","lastScrollPosition","placement","forest","normalizedOptions","nodeMap","checkedStateMap","selectedNodeIds","extractCheckedNodeIdsFromValue","selectedNodeMap","rootOptionsStates","isLoaded","isLoading","loadingError","localSearch","active","noResults","countMap","remoteSearch","computed","selectedNodes","map","getNode","internalValue","single","slice","filter","id","node","isRootNode","isSelected","isLeaf","children","indeterminateNodeIds","selectedNode","ancestors","ancestor","sort","sortValueByLevel","hasValue","visibleOptionIds","traverseAllNodesByIndex","shouldOptionBeIncludedInSearchResult","isBranch","shouldExpand","hasVisibleOptions","showCountOnSearchComputed","hasBranchNodes","some","rootNode","shouldFlattenOptions","watch","newValue","openMenu","closeMenu","initialize","oldValue","$emit","getValue","getInstanceId","buildForestState","handler","isArray","deep","immediate","handleRemoteSearch","handleLocalSearch","nodeIdsFromValue","fixSelectedNodeIds","methods","verifyProps","propName","resetFlags","_blurOnSelect","getRemoteSearchEntry","prevNodeMap","keepDataOfSelectedNodes","normalize","rawNodes","raw","nodeId","createFallbackNode","extractNodeFromValue","fallbackNode","label","enhancedNormalizer","isFallbackNode","isDisabled","isNew","$set","defaultNode","nodeIdListOfPrevValue","nextSelectedNodeIds","traverseDescendantsBFS","descendant","queue","shift","callback","currNode","traverseDescendantsDFS","child","traverseAllNodesDFS","walk","toggleClickOutsideEvent","enabled","handleClickOutside","getValueContainer","$refs","control","getInput","input","focusInput","focus","blurInput","blur","handleMouseDown","preventDefault","stopPropagation","contains","wrapper","done","resetHighlightedOptionWhenNecessary","isExpandedOnSearch","showAllChildrenOnSearch","isMatched","hasMatchedDescendants","lowerCasedSearchQuery","trim","toLocaleLowerCase","splitSearchQuery","replace","split","every","filterValue","nestedSearchLabel","matchKey","lowerCased","entry","callLoadOptionsProp","action","isPending","start","succeed","fail","end","$watch","isExpanded","shouldShowOptionInMenu","getControl","getMenu","$menu","portal","portalTarget","setCurrentHighlightedOption","scroll","prev","isHighlighted","scrollToOption","$option","querySelector","$nextTick","forceReset","highlightFirstOption","first","highlightPrevOption","highlightLastOption","highlightNextOption","next","last","getLast","resetSearchQuery","saveMenuScrollPosition","restoreMenuScrollPosition","loadRootOptions","toggleMenu","toggleExpanded","nextState","childrenStates","loadChildrenOptions","selectedNodeId","ancestorNode","nodes","checkDuplication","verifyNodeShape","isDefaultExpanded","reduce","normalized","concat","hasDisabledDescendants","branchNodes","option","leafNodes","once","result","isPromise","then","catch","console","error","JSON","stringify","undefined","select","clear","_selectNode","_deselectNode","addValue","isFullyChecked","curr","removeValue","hasUncheckedSomeDescendants","removeLastValue","lastValue","lastSelectedNode","created","mounted","destroyed","normalizeComponent","scriptExports","render","staticRenderFns","functionalTemplate","injectStyles","scopeId","moduleIdentifier","shadowMode","hook","_compiled","functional","_scopeId","context","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","_injectStyles","originalRender","h","existing","beforeCreate","inject","_","stringifiedValues","stringifiedValue","inputWidth","needAutoSize","inputStyle","leading","trailing","onFocus","onBlur","onInput","onKeyDown","onMouseDown","renderInputContainer","on","keydown","ref","attrs","renderInput","renderSizer","updateInputWidth","updateSearchQuery","renderSingleValueLabel","customValueLabelRenderer","shouldShowValue","_c","_self","xmlns","viewBox","_withStripped","renderMultiValueItems","renderExceedLimitTip","tag","appear","shouldShowX","shouldShowArrow","hasUndisabledValue","renderX","renderArrow","handleMouseDownOnX","setTimeout","handleMouseDownOnArrow","renderValueContainer","icon","shouldShow","renderOption","renderSubOptionsList","renderLabelContainer","renderCheckboxContainer","renderCheckbox","checkMark","minusMark","renderLabel","NaN","shouldShowCount","labelClassName","countClassName","renderSubOptions","renderNoChildrenTip","renderLoadingChildrenTip","renderLoadingChildrenErrorTip","handleMouseEnterOption","handleMouseDownOnLabelContainer","handleMouseDownOnRetry","indentLevel","above","below","menuStyle","menuContainerStyle","renderMenu","renderBeforeList","beforeListRenderer","renderAfterList","afterListRenderer","renderNormalMenuInner","renderLocalSearchMenuInner","renderAsyncSearchMenuInner","renderOptionList","renderSearchPromptTip","renderLoadingOptionsTip","renderLoadingRootOptionsErrorTip","renderAsyncSearchLoadingErrorTip","renderNoAvailableOptionsTip","renderNoResultsTip","onMenuOpen","onMenuClose","adjustMenuOpenDirection","controlRect","setupMenuSizeWatcher","remove","setupMenuResizeAndScrollEventListeners","removeMenuSizeWatcher","removeMenuResizeAndScrollEventListeners","setupHandlers","removeHandlers","setupControlResizeAndScrollEventListeners","setupControlSizeWatcher","removeControlResizeAndScrollEventListeners","removeControlSizeWatcher","updateWidth","$portalTarget","updateMenuContainerOffset","setup","el","PortalTarget","teardown","mixins","wrapperClass","VERSION","Treeselect","PKG_VERSION"],"mappings":";;;;;2BACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QA0Df,OArDAF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,IAIjBlC,EAAoBA,EAAoBmC,EAAI,I,gBClFrDhC,EAAOD,QAAUkC,QAAQ,0C,cCAzBjC,EAAOD,QAAUkC,QAAQ,qC,cCAzBjC,EAAOD,QAAUkC,QAAQ,6C,cCAzBjC,EAAOD,QAAUkC,QAAQ,gB,cCAzBjC,EAAOD,QAAUkC,QAAQ,oB,cCAzBjC,EAAOD,QAAUkC,QAAQ,e,cCAzBjC,EAAOD,QAAUkC,QAAQ,gB,cCAzBjC,EAAOD,QAAUkC,QAAQ,oB,cCAzBjC,EAAOD,QAAUkC,QAAQ,oB,cCAzBjC,EAAOD,QAAUkC,QAAQ,gB,cCAzBjC,EAAOD,QAAUkC,QAAQ,yC,cCAzBjC,EAAOD,QAAUkC,QAAQ,gB,cCAzBjC,EAAOD,QAAUkC,QAAQ,e,cCAzBjC,EAAOD,QAAUkC,QAAQ,kC,cCAzBjC,EAAOD,QAAUkC,QAAQ,Q,8ZCEZC,E,OACkBC,ECHxB,SAASC,EAAYC,GAC1B,OAAO,SAAqBC,GAC1B,GAAiB,cAAbA,EAAIC,MAAuC,IAAfD,EAAIE,OAAc,4BADhBC,EACgB,iCADhBA,EACgB,kBAChDJ,EAAiBjC,KAAjB,MAAAiC,EAAgB,CAAMK,KAAMJ,GAAZ,OAAoBG,MCFnC,SAASE,EAAeC,EAAcC,GAC3C,IAAMC,EAAiBF,EAAaG,wBAC9BC,EAAcH,EAAWE,wBACzBE,EAAaJ,EAAWK,aAAe,EAEzCF,EAAYG,OAASF,EAAaH,EAAeK,OACnDP,EAAaQ,UAAYC,KAAKC,IAC5BT,EAAWU,UAAYV,EAAWW,aAAeZ,EAAaM,aAAeD,EAC7EL,EAAaa,cAENT,EAAYU,IAAMT,EAAaH,EAAeY,MACvDd,EAAaQ,UAAYC,KAAKM,IAAId,EAAWU,UAAYN,EAAY,I,ICTrEW,E,iCCHG,SAASC,EAAgBC,EAAKC,GACnC,IAAMC,EAAMF,EAAIG,QAAQF,IACX,IAATC,GAAYF,EAAII,OAAOF,EAAK,GDElC,IAAMG,EAAa,GAcnB,SAASC,EAAKC,GACZ,IAAQC,EAAyCD,EAAzCC,IAAKC,EAAoCF,EAApCE,SAAUC,EAA0BH,EAA1BG,UAAWC,EAAeJ,EAAfI,WAC5BC,EAAQJ,EAAIK,YACZC,EAASN,EAAIpB,aAEfsB,IAAcE,GAASD,IAAeG,IACxCP,EAAKG,UAAYE,EACjBL,EAAKI,WAAaG,EAElBL,EAAS,CAAEG,QAAOE,YAItB,SAASC,EAAgBP,EAAKC,GAC5B,IAAMF,EAAO,CACXC,MACAC,WACAC,UAAW,KACXC,WAAY,MAad,OANAN,EAAWW,KAAKT,GAGhBD,EAAKC,GAtCLT,EAAamB,aAAY,WACvBZ,EAAWa,QAAQZ,KAJG,KAiCR,WACdP,EAAgBM,EAAYE,GACvBF,EAAWc,SA1BlBC,cAActB,GACdA,EAAa,OAqCR,SAASuB,EAAUb,EAAKC,GAE7B,IAAMa,EAAkC,IAA1BC,SAASC,aAGnBC,GAAS,EAKPC,GAHiBJ,EACnBP,EACAY,KACqCnB,GAJjB,kBAAaiB,GAAUhB,EAAQ,WAAR,gBAO/C,OAFAgB,GAAS,EAEFC,EEpDT,SAASE,EAAepB,GAEtB,MAA2CqB,iBAAiBrB,GAApDsB,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,UAC7B,MAAO,wBAAwB1B,KAAKwB,EAAWE,EAAYD,GAGtD,SAASE,EAAmCzB,EAAKC,GACtD,IAAMyB,EApBR,SAA2B1B,GAIzB,IAHA,IAAM0B,EAAiB,GACnBC,EAAU3B,EAAI4B,WAEXD,GAAgC,SAArBA,EAAQE,UAAuBF,EAAQG,WAAaf,SAASgB,cACzEX,EAAeO,IAAUD,EAAelB,KAAKmB,GACjDA,EAAUA,EAAQC,WAIpB,OAFAF,EAAelB,KAAKwB,QAEbN,EAUgBO,CAAkBjC,GAOzC,OALAgC,OAAOE,iBAAiB,SAAUjC,EAAU,CAAEkC,SAAS,IACvDT,EAAehB,SAAQ,SAAA0B,GACrBA,EAAaF,iBAAiB,SAAUjC,EAAU,CAAEkC,SAAS,OAGxD,WACLH,OAAOK,oBAAoB,SAAUpC,EAAU,CAAEkC,SAAS,IAC1DT,EAAehB,SAAQ,SAAA4B,GACrBA,EAAcD,oBAAoB,SAAUpC,EAAU,CAAEkC,SAAS,QC9BhE,SAASI,EAAMC,GACpB,OAAOA,GAAMA,E,oECDFC,EAAY,kBAAMpG,OAAOY,OAAO,O,iBCA7C,SAASyF,EAAc9F,GACrB,OAAa,MAATA,GAAkC,WAAjB,IAAOA,IACrBP,OAAOsG,eAAe/F,KAAWP,OAAOkB,UAY1C,SAASqF,EAAWC,EAAQC,GACjC,GAAIJ,EAAcI,GAGhB,IAFA,IAAMC,EAAO1G,OAAO0G,KAAKD,GAEhBnH,EAAI,EAAGqH,EAAMD,EAAKpC,OAAQhF,EAAIqH,EAAKrH,IAblCsH,EAcHJ,EAdQ3F,EAcA6F,EAAKpH,GAblB+G,EADkB9F,EAcIkG,EAAOC,EAAKpH,MAZpCsH,EAAI/F,KAAS+F,EAAI/F,GAAO,IACxB0F,EAAWK,EAAI/F,GAAMN,IAErBqG,EAAI/F,GAAON,EALf,IAAcqG,EAAK/F,EAAKN,EAkBtB,OAAOiG,E,oBCvBF,SAASK,EAASC,EAAU1D,GACjC,OAAmC,IAA5B0D,EAASxD,QAAQF,GCDnB,SAAS2D,EAAK5D,EAAK6D,EAAWC,GACnC,IAAK,IAAI3H,EAAI,EAAGqH,EAAMxD,EAAImB,OAAQhF,EAAIqH,EAAKrH,IACzC,GAAI0H,EAAUvH,KAAKwH,EAAK9D,EAAI7D,GAAIA,EAAG6D,GAAM,OAAOA,EAAI7D,GCFjD,SAAS4H,EAAUC,EAAMC,GAC9B,GAAID,EAAK7C,SAAW8C,EAAK9C,OAAQ,OAAO,EAExC,IAAK,IAAIhF,EAAI,EAAGA,EAAI6H,EAAK7C,OAAQhF,IAC/B,GAAI6H,EAAK7H,KAAO8H,EAAK9H,GAAI,OAAO,EAGlC,OAAO,ECNF,IAcM+H,EAAoB,oBACpBC,EAAwB,wBACxBC,EAAe,eAcfC,EACA,EADAA,EAEJ,GAFIA,EAGH,GAHGA,EAIN,GAJMA,EAKL,GALKA,GAMC,GANDA,GAOD,GAPCA,GAQE,GARFA,GASC,GATDA,GAUH,G,qkBCtBV,SAASC,GAAiBC,EAAGC,GAE3B,IADA,IAAIrI,EAAI,IACL,CACD,GAAIoI,EAAEE,MAAQtI,EAAG,OAAQ,EACzB,GAAIqI,EAAEC,MAAQtI,EAAG,OAAO,EACxB,GAAIoI,EAAEG,MAAMvI,KAAOqI,EAAEE,MAAMvI,GAAI,OAAOoI,EAAEG,MAAMvI,GAAKqI,EAAEE,MAAMvI,GAC3DA,KAyBJ,SAASwI,GAAMC,EAAkBC,EAAQC,GACvC,OAAOF,EACHG,IAAYF,EAAQC,GACpBpB,EAASoB,EAAUD,GAGzB,SAASG,GAAgBC,GACvB,OAAOA,EAAIC,SAAqCC,OAAOF,GAGzD,IAAIG,GAAa,EAEF,IACbC,QADa,WAEX,MAAO,CAGLC,SAAU1G,OAId2G,MAAO,CAILC,sBAAuB,CACrB/G,KAAMgH,QACNC,SAAS,GAOXC,kCAAmC,CACjClH,KAAMgH,QACNC,SAAS,GAMXE,WAAY,CACVnH,KAAMgH,QACNC,SAAS,GAMXG,aAAc,CACZpH,KAAMgH,QACNC,SAAS,GAMXI,MAAO,CACLrH,KAAMgH,QACNC,SAAS,GAMXK,UAAW,CACTtH,KAAMgH,QACNC,SAAS,GAMXM,oBAAqB,CACnBvH,KAAMgH,QACNC,SAAS,GAMXO,sBAAuB,CACrBxH,KAAMgH,QACNC,SAAS,GAMXQ,wBAAyB,CACvBzH,KAAMgH,QACNC,SAAS,GAMXS,oBAAqB,CACnB1H,KAAMgH,QACNC,SAAS,GAMXU,sBAAuB,CACrB3H,KAAMgH,QACNC,SAAS,GAMXW,iBAAkB,CAChB5H,KAAMgH,QACNC,SAAS,GAQXY,eAAgB,CACd7H,KAAM8H,SACNb,QAASc,KAAS,IAMpBC,iBAAkB,CAChBhI,KAAMgH,QACNC,SAAS,GAMXgB,aAAc,CACZjI,KAAMgH,QACNC,SAAS,GAMXiB,UAAW,CACTlI,KAAMgH,QACNC,SAAS,GAMXkB,aAAc,CACZnI,KAAM0G,OACNO,QAAS,aAQXmB,cAAe,CACbpI,KAAMgH,QACNC,SAAS,GAMXoB,eAAgB,CACdrI,KAAM0G,OACNO,QAAS,eAOXqB,cAAe,CACbtI,KAAMgH,QACNC,SAAS,GAOXsB,mBAAoB,CAClBvI,KAAMwI,OACNvB,QAAS,GAQXwB,eAAgB,CACdxB,SAAS,GAMXyB,cAAe,CACb1I,KAAMgH,QACNC,SAAS,GAMX0B,UAAW,CACT3I,KAAM0G,OACNO,QAAS,KAQX2B,qBAAsB,CACpB5I,KAAMgH,QACNC,SAAS,GAMX4B,mBAAoB,CAClB7I,KAAMgH,QACNC,SAAS,GAMX6B,SAAU,CACR9I,KAAMgH,QACNC,SAAS,GAMX8B,qBAAsB,CACpB/I,KAAMgH,QACNC,SAAS,GASX+B,KAAM,CACJhJ,KAAMgH,QACNC,SAAS,GAOXgC,YAAa,CACXjJ,KAAMgH,QACNC,SAAS,GAOXN,WAAY,CAEVM,QAAS,2BAASN,KAAT,OACT3G,KAAM,CAAE0G,OAAQ8B,SAMlBU,WAAY,CACVlJ,KAAMgH,QACNC,SAAS,GAOXkC,MAAO,CACLnJ,KAAMwI,OACNvB,QAASmC,KAOXC,UAAW,CACTrJ,KAAM8H,SACNb,QAAS,SAA0BqC,GACjC,MAAO,OAAP,OAAcA,EAAd,WAOJC,YAAa,CACXvJ,KAAM0G,OACNO,QAAS,cAOXuC,YAAa,CACXxJ,KAAM8H,UAMR2B,UAAW,CACTzJ,KAAM0J,MACNzC,QAASc,IAAS,CAAE,WAMtB4B,UAAW,CACT3J,KAAMwI,OACNvB,QAAS,KAMX2C,SAAU,CACR5J,KAAMgH,QACNC,SAAS,GAMXhJ,KAAM,CACJ+B,KAAM0G,QAMRmD,eAAgB,CACd7J,KAAM0G,OACNO,QAAS,mBAMX6C,cAAe,CACb9J,KAAM0G,OACNO,QAAS,yBAMX8C,cAAe,CACb/J,KAAM0G,OACNO,QAAS,uBAOX+C,WAAY,CACVhK,KAAM8H,SACNb,QAASgD,KAeXC,cAAe,CACblK,KAAM0G,OACNO,QAAS,OACTkD,UAHa,SAGHxL,GAER,OAAOsG,EADkB,CAAE,OAAQ,MAAO,SAAU,QAAS,SAC3BtG,KAOtCyL,YAAa,CACXpK,KAAMgH,QACNC,SAAS,GAMXoD,YAAa,CACXrK,KAAMgH,QACNC,SAAS,GAOXqD,QAAS,CACPtK,KAAM0J,OAMRa,YAAa,CACXvK,KAAM0G,OACNO,QAAS,aAMXuD,SAAU,CACRxK,KAAMgH,QACNC,SAAS,GAMXwD,UAAW,CACTzK,KAAM0G,OACNO,QAAS,UAMXyD,WAAY,CACV1K,KAAM0G,OACNO,QAAS,kBAMX0D,WAAY,CACV3K,KAAMgH,QACNC,SAAS,GAMX2D,aAAc,CACZ5K,KAAMgH,QACNC,SAAS,GAMX4D,iBAAkB,CAChB7K,KAAM0G,OACNO,QAAS,qBAMX6D,UAAW,CACT9K,KAAMgH,QACNC,SAAS,GAWX8D,YAAa,CACX/K,KAAM0G,OACNO,QD1iBsB,eC2iBtBkD,UAHW,SAGDxL,GAER,OAAOsG,EADkB,CD5iBL,eACG,kBACF,gBACG,oBC0iBUtG,KAStCqM,kBAAmB,KAUnBC,YAAa,CACXjL,KAAM0G,OACNO,QDjjBwB,iBCkjBxBkD,UAHW,SAGDxL,GAER,OAAOsG,EADkB,CDnjBH,iBACT,QACA,SCkjBqBtG,KAOtCuM,SAAU,CACRlL,KAAMwI,OACNvB,QAAS,GAUXtI,MAAO,KAUPwM,gBAAiB,CACfnL,KAAM0G,OACNO,QDxlByB,kBCylBzBkD,UAHe,SAGLxL,GAER,OAAOsG,EADkB,CD3lBd,MACY,kBACF,gBACS,0BCylBItG,KAWtCyM,YAAa,CACXpL,KAAM0G,OACNO,QAAS,MAMXoE,OAAQ,CACNrL,KAAM,CAAEwI,OAAQ9B,QAChBO,QAAS,MAIbqE,KA3kBa,WA4kBX,MAAO,CACLC,QAAS,CAEPC,WAAW,EAEXC,YAAa,IAGfC,KAAM,CAEJC,QAAQ,EAERC,QAAS,KAETC,mBAAoB,EAEpBC,UAAW,UAGbC,OAAQ,CAENC,kBAAmB,GAEnBC,QAASzH,IAET0H,gBAAiB1H,IAEjB2H,gBAAiBhM,KAAKiM,iCAGtBC,gBAAiB7H,KAInB8H,kBAxoBG,CACLC,UAAU,EACVC,WAAW,EACXC,aAAc,IAuoBZC,YAAa,CAEXC,QAAQ,EAERC,WAAW,EAEXC,SAAUrI,KAIZsI,aAActI,MAIlBuI,SAAU,CAMRC,cANQ,WAON,OAAO7M,KAAK4L,OAAOI,gBAAgBc,IAAI9M,KAAK+M,UAM9CC,cAbQ,WAaQ,IACVA,EADU,OAId,GAAIhN,KAAKiN,QAAUjN,KAAK6I,MAAQ7I,KAAK0I,oBDzrBxB,QCyrB8C1I,KAAKgL,gBAC9DgC,EAAgBhN,KAAK4L,OAAOI,gBAAgBkB,aACvC,GD1rBkB,oBC0rBdlN,KAAKgL,gBACdgC,EAAgBhN,KAAK4L,OAAOI,gBAAgBmB,QAAO,SAAAC,GACjD,IAAMC,EAAO,EAAKN,QAAQK,GAC1B,QAAIC,EAAKC,aACD,EAAKC,WAAWF,EAAK7J,oBAE1B,GD/rBgB,kBC+rBZxD,KAAKgL,gBACdgC,EAAgBhN,KAAK4L,OAAOI,gBAAgBmB,QAAO,SAAAC,GACjD,IAAMC,EAAO,EAAKN,QAAQK,GAC1B,QAAIC,EAAKG,QACuB,IAAzBH,EAAKI,SAASlL,eAElB,GDpsByB,2BCosBrBvC,KAAKgL,gBAA4C,OACpD0C,EAAuB,GAC7BV,EAAgBhN,KAAK4L,OAAOI,gBAAgBkB,QAC5ClN,KAAK6M,cAAcvK,SAAQ,SAAAqL,GACzBA,EAAaC,UAAUtL,SAAQ,SAAAuL,GACzB/I,EAAS4I,EAAsBG,EAAST,KACxCtI,EAASkI,EAAea,EAAST,KACrCM,EAAqBtL,KAAKyL,EAAST,WAGvC,EAAAJ,GAAc5K,KAAd,QAAsBsL,GASxB,MDntBe,UC6sBX1N,KAAK8K,YACPkC,EAAcc,MAAK,SAACnI,EAAGC,GAAJ,OA5sB3B,SAA0BD,EAAGC,GAC3B,OAAOD,EAAEE,QAAUD,EAAEC,MACjBH,GAAiBC,EAAGC,GACpBD,EAAEE,MAAQD,EAAEC,MAysBmBkI,CAAiB,EAAKhB,QAAQpH,GAAI,EAAKoH,QAAQnH,OD7sB/D,UC8sBJ5F,KAAK8K,aACdkC,EAAcc,MAAK,SAACnI,EAAGC,GAAJ,OAAUF,GAAiB,EAAKqH,QAAQpH,GAAI,EAAKoH,QAAQnH,OAGvEoH,GAMTgB,SAxDQ,WAyDN,OAAOhO,KAAKgN,cAAczK,OAAS,GAMrC0K,OA/DQ,WAgEN,OAAQjN,KAAKyJ,UAUfwE,iBA1EQ,WA0EW,WACXA,EAAmB,GAYzB,OAVAjO,KAAKkO,yBAAwB,SAAAb,GAK3B,GAJK,EAAKd,YAAYC,SAAU,EAAK2B,qCAAqCd,IACxEY,EAAiB7L,KAAKiL,EAAKD,IAGzBC,EAAKe,WAAa,EAAKC,aAAahB,GACtC,OAAO,KAIJY,GAMTK,kBA7FQ,WA8FN,OAAwC,IAAjCtO,KAAKiO,iBAAiB1L,QAM/BgM,0BApGQ,WAwGN,MAAyC,kBAA3BvO,KAAK6K,kBACf7K,KAAK6K,kBACL7K,KAAK2K,WAMX6D,eAhHQ,WAiHN,OAAOxO,KAAK4L,OAAOC,kBAAkB4C,MAAK,SAAAC,GAAQ,OAAIA,EAASN,aAEjEO,qBAnHQ,WAoHN,OAAO3O,KAAKuM,YAAYC,QAAUxM,KAAKyI,uBAK3CmG,MAAO,CACL5H,WADK,SACM6H,GACLA,EAAU7O,KAAK8O,WACd9O,KAAK+O,aAGZlH,iBANK,WAOH7H,KAAKgP,cAGPrG,SAVK,SAUIkG,GAEHA,GAAY7O,KAAKuL,KAAKC,OAAQxL,KAAK+O,YAC7BF,GAAa7O,KAAKuL,KAAKC,SAAUxL,KAAKgH,YAAYhH,KAAK8O,YAGnEjG,KAhBK,WAiBH7I,KAAKgP,cAGPhC,cApBK,SAoBS6B,EAAUI,GACH9J,EAAU0J,EAAUI,IAIvBjP,KAAKkP,MAAM,QAASlP,KAAKmP,WAAYnP,KAAKoP,kBAG5D9F,UA5BK,WA6BHtJ,KAAKgP,cAGPvF,SAhCK,SAgCIoF,GAIHA,GAAU7O,KAAKqP,oBAGrBlF,QAAS,CACPmF,QADO,WAEDtP,KAAKkH,QAETlH,KAAKgP,aACLhP,KAAKmM,kBAAkBC,SAAW7C,MAAMgG,QAAQvP,KAAKmK,WAEvDqF,MAAM,EACNC,WAAW,GAGb,sBAlDK,WAmDCzP,KAAKkH,MACPlH,KAAK0P,qBAEL1P,KAAK2P,oBAGP3P,KAAKkP,MAAM,gBAAiBlP,KAAKoL,QAAQE,YAAatL,KAAKoP,kBAG7D5Q,MA5DK,WA6DH,IAAMoR,EAAmB5P,KAAKiM,iCACX9G,EAAUyK,EAAkB5P,KAAKgN,gBACpChN,KAAK6P,mBAAmBD,KAI5CE,QAAS,CACPC,YADO,WACO,WAoBZ,GAnBAvQ,GACE,kBAAM,EAAK0H,OAAQ,EAAKsD,cACxB,iBAAM,yEAGY,MAAhBxK,KAAKmK,SAAoBnK,KAAKqJ,aAChC7J,GACE,kBAAM,KACN,iBAAM,oFAINQ,KAAK6I,MACPrJ,GACE,kBAAM,EAAKiK,YACX,iBAAM,sEAILzJ,KAAK6I,KAAM,CACI,CAChB,sBACA,wBACA,wBACA,2BAGQvG,SAAQ,SAAA0N,GAChBxQ,GACE,kBAAO,EAAKwQ,MACZ,4BAAUA,EAAV,wCAMRC,WAtCO,WAuCLjQ,KAAKkQ,eAAgB,GAGvBlB,WA1CO,WA2CL,IAAM7E,EAAUnK,KAAKkH,MACjBlH,KAAKmQ,uBAAuBhG,QAC5BnK,KAAKmK,QAET,GAAIZ,MAAMgG,QAAQpF,GAAU,CAE1B,IAAMiG,EAAcpQ,KAAK4L,OAAOE,QAChC9L,KAAK4L,OAAOE,QAAUzH,IACtBrE,KAAKqQ,wBAAwBD,GAC7BpQ,KAAK4L,OAAOC,kBAAoB7L,KAAKsQ,UD36Bf,KC26ByCnG,EAASiG,GAOxEpQ,KAAK6P,mBAAmB7P,KAAKgN,oBAE7BhN,KAAK4L,OAAOC,kBAAoB,IAIpCuD,cAjEO,WAkEL,OAA0B,MAAnBpP,KAAKwG,WAAqBxG,KAAKoN,GAAKpN,KAAKwG,YAGlD2I,SArEO,WAqEI,WACT,GAAyB,OAArBnP,KAAKiL,YACP,OAAOjL,KAAKyJ,SACRzJ,KAAKgN,cAAcE,QACnBlN,KAAKgN,cAAc,GAGzB,IAAMuD,EAAWvQ,KAAKgN,cAAcF,KAAI,SAAAM,GAAE,OAAI,EAAKL,QAAQK,GAAIoD,OAC/D,OAAOxQ,KAAKyJ,SAAW8G,EAAWA,EAAS,IAG7CxD,QAhFO,SAgFC0D,GAMN,OALAjR,GACE,kBAAgB,MAAViR,KACN,4CAA0BA,MAGd,MAAVA,EAAuB,KAEpBA,KAAUzQ,KAAK4L,OAAOE,QACzB9L,KAAK4L,OAAOE,QAAQ2E,GACpBzQ,KAAK0Q,mBAAmBD,IAG9BC,mBA7FO,SA6FYtD,GAKjB,IAAMoD,EAAMxQ,KAAK2Q,qBAAqBvD,GAEhCwD,EAAe,CACnBxD,KACAyD,MAHY7Q,KAAK8Q,mBAAmBN,GAAKK,OAA7B,UAAyCzD,EAAzC,cAIZQ,UAAW,GACXpK,WD/9BsB,KCg+BtBuN,gBAAgB,EAChBzD,YAAY,EACZE,QAAQ,EACRY,UAAU,EACV4C,YAAY,EACZC,OAAO,EACPnL,MAAO,EAAG,GACVD,MAAO,EACP2K,OAGF,OAAOxQ,KAAKkR,KAAKlR,KAAK4L,OAAOE,QAASsB,EAAIwD,IAG5C3E,+BAvHO,WAuH0B,WAC/B,OAAkB,MAAdjM,KAAKxB,MAAsB,GAEN,OAArBwB,KAAKiL,YACAjL,KAAKyJ,SACRzJ,KAAKxB,MAAM0O,QACX,CAAElN,KAAKxB,QAGLwB,KAAKyJ,SAAWzJ,KAAKxB,MAAQ,CAAEwB,KAAKxB,QACzCsO,KAAI,SAAAO,GAAI,OAAI,EAAKyD,mBAAmBzD,MACpCP,KAAI,SAAAO,GAAI,OAAIA,EAAKD,OAGtBuD,qBArIO,SAqIcvD,GAAI,WACjB+D,EAAc,CAAE/D,MAEtB,MAAyB,OAArBpN,KAAKiL,YACAkG,EAMOnM,EAHGhF,KAAKyJ,SACpBF,MAAMgG,QAAQvP,KAAKxB,OAASwB,KAAKxB,MAAQ,GACzCwB,KAAKxB,MAAQ,CAAEwB,KAAKxB,OAAU,IAGhC,SAAA6O,GAAI,OAAIA,GAAQ,EAAKyD,mBAAmBzD,GAAMD,KAAOA,MAGrC+D,GAGpBtB,mBAvJO,SAuJYuB,GAAuB,WACpCC,EAAsB,GAG1B,GAAIrR,KAAKiN,QAAUjN,KAAK6I,MAAQ7I,KAAK0I,oBD//BxB,QC+/B8C1I,KAAKgL,gBAC9DqG,EAAsBD,OACjB,GDhgCkB,oBCggCdpR,KAAKgL,gBACdoG,EAAsB9O,SAAQ,SAAAmO,GAC5BY,EAAoBjP,KAAKqO,GACzB,IAAMpD,EAAO,EAAKN,QAAQ0D,GACtBpD,EAAKe,UAAU,EAAKkD,uBAAuBjE,GAAM,SAAAkE,GACnDF,EAAoBjP,KAAKmP,EAAWnE,eAGnC,GDvgCgB,kBCugCZpN,KAAKgL,gBAGd,IAFA,IAAM8B,EAAMzI,IACNmN,EAAQJ,EAAsBlE,QAC7BsE,EAAMjP,QAAQ,CACnB,IAAMkO,EAASe,EAAMC,QACfpE,EAAOrN,KAAK+M,QAAQ0D,GAC1BY,EAAoBjP,KAAKqO,GACrBpD,EAAKC,aACHD,EAAK7J,WAAW4J,MAAMN,IAAMA,EAAIO,EAAK7J,WAAW4J,IAAMC,EAAK7J,WAAWiK,SAASlL,QACnD,KAA5BuK,EAAIO,EAAK7J,WAAW4J,KAAWoE,EAAMpP,KAAKiL,EAAK7J,WAAW4J,UAE7D,GDjhCyB,2BCihCrBpN,KAAKgL,gBAMd,IALA,IAAM8B,EAAMzI,IACNmN,EAAQJ,EAAsBjE,QAAO,SAAAsD,GACzC,IAAMpD,EAAO,EAAKN,QAAQ0D,GAC1B,OAAOpD,EAAKG,QAAmC,IAAzBH,EAAKI,SAASlL,UAE/BiP,EAAMjP,QAAQ,CACnB,IAAMkO,EAASe,EAAMC,QACfpE,EAAOrN,KAAK+M,QAAQ0D,GAC1BY,EAAoBjP,KAAKqO,GACrBpD,EAAKC,aACHD,EAAK7J,WAAW4J,MAAMN,IAAMA,EAAIO,EAAK7J,WAAW4J,IAAMC,EAAK7J,WAAWiK,SAASlL,QACnD,KAA5BuK,EAAIO,EAAK7J,WAAW4J,KAAWoE,EAAMpP,KAAKiL,EAAK7J,WAAW4J,KAIjDjI,EAAUnF,KAAK4L,OAAOI,gBAAiBqF,KAI1CrR,KAAK4L,OAAOI,gBAAkBqF,GAE9CrR,KAAKqP,oBAGPgB,wBAzMO,SAyMiBD,GAAa,WAGnCpQ,KAAK4L,OAAOI,gBAAgB1J,SAAQ,SAAA8K,GAClC,GAAKgD,EAAYhD,GAAjB,CACA,IAAMC,EAAO,GAAH,MACL+C,EAAYhD,IADP,IAER2D,gBAAgB,IAElB,EAAKG,KAAK,EAAKtF,OAAOE,QAASsB,EAAIC,QAIvCE,WAtNO,SAsNIF,GAET,OAAgD,IAAzCrN,KAAK4L,OAAOM,gBAAgBmB,EAAKD,KAG1CkE,uBA3NO,SA2NgB9N,EAAYkO,GAEjC,GAAKlO,EAAW4K,SAEhB,IADA,IAAMoD,EAAQhO,EAAWiK,SAASP,QAC3BsE,EAAMjP,QAAQ,CACnB,IAAMoP,EAAWH,EAAM,GACnBG,EAASvD,UAAUoD,EAAMpP,KAAN,MAAAoP,EAAK,IAASG,EAASlE,WAC9CiE,EAASC,GACTH,EAAMC,UAIVG,uBAvOO,SAuOgBpO,EAAYkO,GAAU,WACtClO,EAAW4K,UAChB5K,EAAWiK,SAASnL,SAAQ,SAAAuP,GAE1B,EAAKD,uBAAuBC,EAAOH,GACnCA,EAASG,OAIbC,oBAhPO,SAgPaJ,GAAU,WAC5B1R,KAAK4L,OAAOC,kBAAkBvJ,SAAQ,SAAAoM,GAEpC,EAAKkD,uBAAuBlD,EAAUgD,GACtCA,EAAShD,OAIbR,wBAxPO,SAwPiBwD,IACT,SAAPK,EAAOvO,GACXA,EAAWiK,SAASnL,SAAQ,SAAAuP,IACF,IAApBH,EAASG,IAAoBA,EAAMzD,UACrC2D,EAAKF,MAOXE,CAAK,CAAEtE,SAAUzN,KAAK4L,OAAOC,qBAG/BmG,wBAtQO,SAsQiBC,GAClBA,EACFtP,SAASmB,iBAAiB,YAAa9D,KAAKkS,oBAAoB,GAEhEvP,SAASsB,oBAAoB,YAAajE,KAAKkS,oBAAoB,IAIvEC,kBA9QO,WA+QL,OAAOnS,KAAKoS,MAAMC,QAAQD,MAAM,oBAGlCE,SAlRO,WAmRL,OAAOtS,KAAKmS,oBAAoBC,MAAMG,OAGxCC,WAtRO,WAuRLxS,KAAKsS,WAAWG,SAGlBC,UA1RO,WA2RL1S,KAAKsS,WAAWK,QAGlBC,gBAAiBlT,GAAY,SAAyBE,IACpDA,EAAIiT,iBACJjT,EAAIkT,kBAEA9S,KAAK2I,YAEyB3I,KAAKmS,oBAAoBvQ,IAAImR,SAASnT,EAAI6E,UAC1CzE,KAAKuL,KAAKC,SAAWxL,KAAKiK,aAAejK,KAAKoL,QAAQC,YACtFrL,KAAK8O,WAGH9O,KAAKkQ,cACPlQ,KAAK0S,YAGL1S,KAAKwS,aAGPxS,KAAKiQ,iBAGPiC,mBAnTO,SAmTYtS,GAEbI,KAAKoS,MAAMY,UAAYhT,KAAKoS,MAAMY,QAAQD,SAASnT,EAAI6E,UACzDzE,KAAK0S,YACL1S,KAAK+O,cAITY,kBA3TO,WA2Ta,WACVrE,EAAgBtL,KAAKoL,QAArBE,YACF2H,EAAO,kBAAM,EAAKC,qCAAoC,IAE5D,IAAK5H,EAGH,OADAtL,KAAKuM,YAAYC,QAAS,EACnByG,IAITjT,KAAKuM,YAAYC,QAAS,EAG1BxM,KAAKuM,YAAYE,WAAY,EAC7BzM,KAAK8R,qBAAoB,SAAAzE,GACJ,MAAfA,EAAKe,WACPf,EAAK8F,oBAAqB,EAC1B9F,EAAK+F,yBAA0B,EAC/B/F,EAAKgG,WAAY,EACjBhG,EAAKiG,uBAAwB,EAC7B,EAAKpC,KAAK,EAAK3E,YAAYG,SAAUW,EAAKD,IAA1C,WD/rCkB,eCgsCA,GADlB,MD9rCqB,kBCgsCA,GAFrB,MD7rCmB,gBCgsCA,GAHnB,MD5rCsB,mBCgsCA,GAJtB,QASJ,IAAMmG,EAAwBjI,EAAYkI,OAAOC,oBAC3CC,EAAmBH,EAAsBI,QAAQ,OAAQ,KAAKC,MAAM,KAC1E5T,KAAK8R,qBAAoB,SAAAzE,GACnB,EAAK5C,cAAgBiJ,EAAiBnR,OAAS,EACjD8K,EAAKgG,UAAYK,EAAiBG,OAAM,SAAAC,GAAW,OACjD/N,IAAM,EAAO+N,EAAazG,EAAK0G,sBAGjC1G,EAAKgG,UAAY,EAAK/J,UAAUmF,MAAK,SAAAuF,GAAQ,OAC3CjO,IAAO,EAAK6C,qBAAsB2K,EAAuBlG,EAAK4G,WAAWD,OAIzE3G,EAAKgG,YACP,EAAK9G,YAAYE,WAAY,EAC7BY,EAAKO,UAAUtL,SAAQ,SAAAuL,GAAQ,OAAI,EAAKtB,YAAYG,SAASmB,EAAST,IAAnC,qBAC/BC,EAAKG,QAAQH,EAAKO,UAAUtL,SAAQ,SAAAuL,GAAQ,OAAI,EAAKtB,YAAYG,SAASmB,EAAST,IAAnC,sBDhuChC,OCiuChBC,EAAK7J,aACP,EAAK+I,YAAYG,SAASW,EAAK7J,WAAW4J,IAA1C,cAA+D,EAE3DC,EAAKG,SAAQ,EAAKjB,YAAYG,SAASW,EAAK7J,WAAW4J,IAA1C,eAAgE,MAKlFC,EAAKgG,WAAchG,EAAKe,UAAYf,EAAK8F,qBDzuCtB,OC0uCpB9F,EAAK7J,aAEL6J,EAAK7J,WAAW2P,oBAAqB,EACrC9F,EAAK7J,WAAW8P,uBAAwB,MAI5CL,KAGFvD,mBA7XO,WA6Xc,WACXpE,EAAgBtL,KAAKoL,QAArBE,YACF4I,EAAQlU,KAAKmQ,uBACb8C,EAAO,WACX,EAAKjE,aACL,EAAKkE,qCAAoC,IAG3C,IAAqB,KAAhB5H,GAAsBtL,KAAK8H,eAAiBoM,EAAM9H,SACrD,OAAO6G,IAGTjT,KAAKmU,oBAAoB,CACvBC,OAAQ5O,EACRzF,KAAM,CAAEuL,eACR+I,UAHuB,WAIrB,OAAOH,EAAM7H,WAEfiI,MAAO,WACLJ,EAAM7H,WAAY,EAClB6H,EAAM9H,UAAW,EACjB8H,EAAM5H,aAAe,IAEvBiI,QAAS,SAAApK,GACP+J,EAAM9H,UAAW,EACjB8H,EAAM/J,QAAUA,EAGZ,EAAKiB,QAAQE,cAAgBA,GAAa2H,KAEhDuB,KAAM,SAAAnO,GACJ6N,EAAM5H,aAAelG,GAAgBC,IAEvCoO,IAAK,WACHP,EAAM7H,WAAY,MAKxB8D,qBApaO,WAoagB,WACb7E,EAAgBtL,KAAKoL,QAArBE,YACF4I,EAAQlU,KAAK2M,aAAarB,IAAlB,SA1vCX,CACLc,UAAU,EACVC,WAAW,EACXC,aAAc,KAuvCE,IAEZnC,QAAS,KAaX,GATAnK,KAAK0U,QACH,kBAAMR,EAAM/J,WACZ,WAEM,EAAKiB,QAAQE,cAAgBA,GAAa,EAAK0D,eAErD,CAAEQ,MAAM,IAGU,KAAhBlE,EAAoB,CACtB,GAAI/B,MAAMgG,QAAQvP,KAAKsI,gBAGrB,OAFA4L,EAAM/J,QAAUnK,KAAKsI,eACrB4L,EAAM9H,UAAW,EACV8H,EACF,IAA4B,IAAxBlU,KAAKsI,eAEd,OADA4L,EAAM9H,UAAW,EACV8H,EAQX,OAJKlU,KAAK2M,aAAarB,IACrBtL,KAAKkR,KAAKlR,KAAK2M,aAAcrB,EAAa4I,GAGrCA,GAGT7F,aAvcO,SAucMhB,GACX,OAAOrN,KAAKuM,YAAYC,OAASa,EAAK8F,mBAAqB9F,EAAKsH,YAGlExG,qCA3cO,SA2c8Bd,GAEnC,QAAIA,EAAKgG,eAELhG,EAAKe,WAAYf,EAAKiG,uBAA0BtT,KAAKyI,yBAGpD4E,EAAKC,aAAcD,EAAK7J,WAAW4P,2BAK1CwB,uBAvdO,SAudgBvH,GACrB,QAAIrN,KAAKuM,YAAYC,SAAWxM,KAAKmO,qCAAqCd,KAM5EwH,WA9dO,WA+dL,OAAO7U,KAAKoS,MAAMC,QAAQzQ,KAG5BkT,QAleO,WAmeL,IACMC,GADM/U,KAAKiH,aAAejH,KAAKoS,MAAM4C,OAAOC,aAAejV,MAC/CoS,MAAM7G,KAAK6G,MAAM7G,KACnC,OAAOwJ,GAA4B,aAAnBA,EAAMtR,SAA0BsR,EAAQ,MAG1DG,4BAxeO,SAweqB7H,GAAqB,WAAf8H,IAAe,yDACzCC,EAAOpV,KAAKuL,KAAKE,QAQvB,GAPY,MAAR2J,GAAgBA,KAAQpV,KAAK4L,OAAOE,UACtC9L,KAAK4L,OAAOE,QAAQsJ,GAAMC,eAAgB,GAG5CrV,KAAKuL,KAAKE,QAAU4B,EAAKD,GACzBC,EAAKgI,eAAgB,EAEjBrV,KAAKuL,KAAKC,QAAU2J,EAAQ,CAC9B,IAAMG,EAAiB,WACrB,IAAMP,EAAQ,EAAKD,UACbS,EAAUR,EAAMS,cAAN,2CAAwDnI,EAAKD,GAA7D,OACZmI,GAAStV,EAAe8U,EAAOQ,IAIjCvV,KAAK8U,UACPQ,IAGAtV,KAAKyV,UAAUH,KAKrBpC,oCAlgBO,WAkgBiD,IAApBwC,EAAoB,wDAC9CjK,EAAYzL,KAAKuL,KAAjBE,SAGNiK,GAAyB,MAAXjK,GACZA,KAAWzL,KAAK4L,OAAOE,SACxB9L,KAAK4U,uBAAuB5U,KAAK+M,QAAQtB,KAE1CzL,KAAK2V,wBAITA,qBA9gBO,WA+gBL,GAAK3V,KAAKsO,kBAAV,CAEA,IAAMsH,EAAQ5V,KAAKiO,iBAAiB,GACpCjO,KAAKkV,4BAA4BlV,KAAK+M,QAAQ6I,MAGhDC,oBArhBO,WAshBL,GAAK7V,KAAKsO,kBAAV,CAEA,IAAM8G,EAAOpV,KAAKiO,iBAAiB1M,QAAQvB,KAAKuL,KAAKE,SAAW,EAChE,IAAc,IAAV2J,EAAa,OAAOpV,KAAK8V,sBAC7B9V,KAAKkV,4BAA4BlV,KAAK+M,QAAQ/M,KAAKiO,iBAAiBmH,OAGtEW,oBA7hBO,WA8hBL,GAAK/V,KAAKsO,kBAAV,CAEA,IAAM0H,EAAOhW,KAAKiO,iBAAiB1M,QAAQvB,KAAKuL,KAAKE,SAAW,EAChE,GAAIuK,IAAShW,KAAKiO,iBAAiB1L,OAAQ,OAAOvC,KAAK2V,uBACvD3V,KAAKkV,4BAA4BlV,KAAK+M,QAAQ/M,KAAKiO,iBAAiB+H,OAGtEF,oBAriBO,WAsiBL,GAAK9V,KAAKsO,kBAAV,CAEA,IAAM2H,EAAOC,IAAQlW,KAAKiO,kBAC1BjO,KAAKkV,4BAA4BlV,KAAK+M,QAAQkJ,MAGhDE,iBA5iBO,WA6iBLnW,KAAKoL,QAAQE,YAAc,IAG7ByD,UAhjBO,YAijBA/O,KAAKuL,KAAKC,SAAYxL,KAAK2I,UAAY3I,KAAKgH,aACjDhH,KAAKoW,yBACLpW,KAAKuL,KAAKC,QAAS,EACnBxL,KAAKgS,yBAAwB,GAC7BhS,KAAKmW,mBACLnW,KAAKkP,MAAM,QAASlP,KAAKmP,WAAYnP,KAAKoP,mBAG5CN,SAzjBO,WA0jBD9O,KAAK2I,UAAY3I,KAAKuL,KAAKC,SAC/BxL,KAAKuL,KAAKC,QAAS,EACnBxL,KAAKyV,UAAUzV,KAAKkT,qCACpBlT,KAAKyV,UAAUzV,KAAKqW,2BACfrW,KAAKmK,SAAYnK,KAAKkH,OAAOlH,KAAKsW,kBACvCtW,KAAKgS,yBAAwB,GAC7BhS,KAAKkP,MAAM,OAAQlP,KAAKoP,mBAG1BmH,WAnkBO,WAokBDvW,KAAKuL,KAAKC,OACZxL,KAAK+O,YAEL/O,KAAK8O,YAIT0H,eA3kBO,SA2kBQnJ,GACb,IAAIoJ,EAEAzW,KAAKuM,YAAYC,QACnBiK,EAAYpJ,EAAK8F,oBAAsB9F,EAAK8F,sBAC7B9F,EAAK+F,yBAA0B,GAE9CqD,EAAYpJ,EAAKsH,YAActH,EAAKsH,WAGlC8B,IAAcpJ,EAAKqJ,eAAetK,UACpCpM,KAAK2W,oBAAoBtJ,IAI7BgC,iBA1lBO,WA0lBY,WACXnD,EAAkB7H,IACxBrE,KAAK4L,OAAOI,gBAAgB1J,SAAQ,SAAAsU,GAClC1K,EAAgB0K,IAAkB,KAEpC5W,KAAK4L,OAAOM,gBAAkBA,EAE9B,IAAMH,EAAkB1H,IACpBrE,KAAKyJ,WACPzJ,KAAKkO,yBAAwB,SAAAb,GAC3BtB,EAAgBsB,EAAKD,IDx9CN,KC29CjBpN,KAAK6M,cAAcvK,SAAQ,SAAAqL,GACzB5B,EAAgB4B,EAAaP,ID19ChB,EC49CR,EAAKvE,MAAS,EAAKH,oBACtBiF,EAAaC,UAAUtL,SAAQ,SAAAuU,GACxB,EAAKtJ,WAAWsJ,KACnB9K,EAAgB8K,EAAazJ,IDh+ChB,UCs+CvBpN,KAAK4L,OAAOG,gBAAkBA,GAGhC+E,mBAtnBO,SAsnBYN,GACjB,OAAO,GAAP,MACKA,GACAxQ,KAAK6J,WAAW2G,EAAKxQ,KAAKoP,mBAIjCkB,UA7nBO,SA6nBG9M,EAAYsT,EAAO1G,GAAa,WACpCvE,EAAoBiL,EACrBhK,KAAI,SAAAO,GAAI,MAAI,CAAE,EAAKyD,mBAAmBzD,GAAOA,MAC7CP,KAAI,WAAgBhH,GAAU,eAAvBuH,EAAuB,KAAjBmD,EAAiB,KAC7B,EAAKuG,iBAAiB1J,GACtB,EAAK2J,gBAAgB3J,GAErB,IAAQD,EAA2CC,EAA3CD,GAAIyD,EAAuCxD,EAAvCwD,MAAOpD,EAAgCJ,EAAhCI,SAAUwJ,EAAsB5J,EAAtB4J,kBACvB3J,ED5/Cc,OC4/CD9J,EACbqC,EAAQyH,EAAa,EAAI9J,EAAWqC,MAAQ,EAC5CuI,EAAW7E,MAAMgG,QAAQ9B,IAA0B,OAAbA,EACtCD,GAAUY,EACV4C,IAAe3D,EAAK2D,aAAgB,EAAKnI,OAASyE,GAAc9J,EAAWwN,WAC3EC,IAAU5D,EAAK4D,MACfgD,EAAa,EAAK3K,UAAU4N,QAAO,SAAC9B,EAAMtW,GAAP,gBACpCsW,GADoC,UAEtCtW,GA19CqBN,EA09CU6O,EAAKvO,GAz9C1B,iBAAVN,EAA2BA,EACjB,iBAAVA,GAAuB2F,EAAM3F,GAEjC,GAFgDA,EAAQ,IAw9CViV,sBA19CvD,IAAkCjV,IA29CpB,IACEuV,EAAoBzG,EACtB2G,EAAWpD,MACXrN,EAAWuQ,kBAAoB,IAAME,EAAWpD,MAE9CsG,EAAa,EAAKjG,KAAK,EAAKtF,OAAOE,QAASsB,EAAI/I,KAkBtD,GAjBA,EAAK6M,KAAKiG,EAAY,KAAM/J,GAC5B,EAAK8D,KAAKiG,EAAY,QAAStG,GAC/B,EAAKK,KAAKiG,EAAY,QAAStR,GAC/B,EAAKqL,KAAKiG,EAAY,YAAa7J,EAAa,GAAK,CAAE9J,GAAa4T,OAAO5T,EAAWoK,YACtF,EAAKsD,KAAKiG,EAAY,SAAU7J,EAAa,GAAK9J,EAAWsC,OAAOsR,OAAOtR,IAC3E,EAAKoL,KAAKiG,EAAY,aAAc3T,GACpC,EAAK0N,KAAKiG,EAAY,aAAclD,GACpC,EAAK/C,KAAKiG,EAAY,oBAAqBpD,GAC3C,EAAK7C,KAAKiG,EAAY,aAAcnG,GACpC,EAAKE,KAAKiG,EAAY,QAASlG,GAC/B,EAAKC,KAAKiG,EAAY,aAAa,GACnC,EAAKjG,KAAKiG,EAAY,iBAAiB,GACvC,EAAKjG,KAAKiG,EAAY,WAAY/I,GAClC,EAAK8C,KAAKiG,EAAY,SAAU3J,GAChC,EAAK0D,KAAKiG,EAAY,aAAc7J,GACpC,EAAK4D,KAAKiG,EAAY,MAAO3G,GAEzBpC,EAAU,OACNhC,EAAW7C,MAAMgG,QAAQ9B,GAE/B,EAAKyD,KAAKiG,EAAY,iBAAtB,SA5/CH,CACL/K,UAAU,EACVC,WAAW,EACXC,aAAc,KAy/CN,IAEEF,cAEF,EAAK8E,KAAKiG,EAAY,aAA2C,kBAAtBF,EACvCA,EACApR,EAAQ,EAAKuC,oBACjB,EAAK8I,KAAKiG,EAAY,yBAAyB,GAC/C,EAAKjG,KAAKiG,EAAY,0BAA0B,GAChD,EAAKjG,KAAKiG,EAAY,sBAAsB,GAC5C,EAAKjG,KAAKiG,EAAY,2BAA2B,GACjD,EAAKjG,KAAKiG,EAAY,SAAtB,WDliDgB,eCmiDE,GADlB,MDjiDmB,kBCmiDE,GAFrB,MDhiDiB,gBCmiDE,GAHnB,MD/hDoB,mBCmiDE,GAJtB,IAMA,EAAKjG,KAAKiG,EAAY,WAAY/K,EAC9B,EAAKkE,UAAU6G,EAAY1J,EAAU2C,GACrC,KAEsB,IAAtB6G,GAA4BE,EAAWvJ,UAAUtL,SAAQ,SAAAuL,GAC3DA,EAAS8G,YAAa,KAGnBvI,GAAwC,mBAArB,EAAK/C,aAKjB+C,GAAY+K,EAAWxC,YACjC,EAAKgC,oBAAoBQ,GALzB3X,GACE,kBAAM,KACN,iBAAM,yFAgBZ,GATA2X,EAAWvJ,UAAUtL,SAAQ,SAAAuL,GAAQ,OAAIA,EAAS1E,MAAT,qBACrCqE,GAAQ2J,EAAWvJ,UAAUtL,SAAQ,SAAAuL,GAAQ,OAAIA,EAAS1E,MAAT,sBAChDmE,IACH9J,EAAW2F,MAAX,cAAkC,EAC9BqE,IAAQhK,EAAW2F,MAAX,eAAmC,GAC3C6H,IAAYxN,EAAW6T,wBAAyB,IAIlDjH,GAAeA,EAAYhD,GAAK,CAClC,IAAMgI,EAAOhF,EAAYhD,GAEzB+J,EAAW9D,UAAY+B,EAAK/B,UAC5B8D,EAAW/D,wBAA0BgC,EAAKhC,wBAC1C+D,EAAW9B,cAAgBD,EAAKC,cAE5BD,EAAKhH,UAAY+I,EAAW/I,WAC9B+I,EAAWxC,WAAaS,EAAKT,WAC7BwC,EAAWhE,mBAAqBiC,EAAKjC,mBAIjCiC,EAAKsB,eAAetK,WAAa+K,EAAWT,eAAetK,SAG7D+K,EAAWxC,YAAa,EAGxBwC,EAAWT,eAAX,MAAiCtB,EAAKsB,iBAK5C,OAAOS,KAGX,GAAInX,KAAK6H,iBAAkB,CACzB,IAAMyP,EAAczL,EAAkBsB,QAAO,SAAAoK,GAAM,OAAIA,EAAOnJ,YACxDoJ,EAAY3L,EAAkBsB,QAAO,SAAAoK,GAAM,OAAIA,EAAO/J,UAC5D3B,EAAoByL,EAAYF,OAAOI,GAGzC,OAAO3L,GAGTyK,gBAxvBO,WAwvBW,WAChBtW,KAAKmU,oBAAoB,CACvBC,OAAQ9O,EACR+O,UAAW,WACT,OAAO,EAAKlI,kBAAkBE,WAEhCiI,MAAO,WACL,EAAKnI,kBAAkBE,WAAY,EACnC,EAAKF,kBAAkBG,aAAe,IAExCiI,QAAS,WACP,EAAKpI,kBAAkBC,UAAW,EAElC,EAAKqJ,WAAU,WACb,EAAKvC,qCAAoC,OAG7CsB,KAAM,SAAAnO,GACJ,EAAK8F,kBAAkBG,aAAelG,GAAgBC,IAExDoO,IAAK,WACH,EAAKtI,kBAAkBE,WAAY,MAKzCsK,oBAlxBO,SAkxBanT,GAAY,WAItB4J,EAAY5J,EAAZ4J,GAAIoD,EAAQhN,EAARgN,IAEZxQ,KAAKmU,oBAAoB,CACvBC,OAAQ7O,EACRxF,KAAM,CAKJyD,WAAYgN,GAEd6D,UAAW,WACT,OAAO,EAAKtH,QAAQK,GAAIsJ,eAAerK,WAEzCiI,MAAO,WACL,EAAKvH,QAAQK,GAAIsJ,eAAerK,WAAY,EAC5C,EAAKU,QAAQK,GAAIsJ,eAAepK,aAAe,IAEjDiI,QAAS,WACP,EAAKxH,QAAQK,GAAIsJ,eAAetK,UAAW,GAE7CoI,KAAM,SAAAnO,GACJ,EAAK0G,QAAQK,GAAIsJ,eAAepK,aAAelG,GAAgBC,IAEjEoO,IAAK,WACH,EAAK1H,QAAQK,GAAIsJ,eAAerK,WAAY,MAKlD8H,oBApzBO,YAozBqE,IAAtDC,EAAsD,EAAtDA,OAAQrU,EAA8C,EAA9CA,KAAMsU,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,IACnE,GAAKzU,KAAKqJ,cAAegL,IAAzB,CAIAC,IAEA,IAAM5C,EAAW+F,KAAK,SAACpR,EAAKqR,GACtBrR,EACFmO,EAAKnO,GAELkO,EAAQmD,GAGVjD,OAEIiD,EAAS1X,KAAKqJ,YAAL,OACb+D,GAAIpN,KAAKoP,gBACT5I,WAAYxG,KAAKoP,gBACjBgF,UACGrU,GAJU,IAKb2R,cAGEiG,IAAUD,IACZA,EAAOE,MAAK,WACVlG,OACC,SAAArL,GACDqL,EAASrL,MACRwR,OAAM,SAAAxR,GAEPyR,QAAQC,MAAM1R,QAKpB0Q,iBAx1BO,SAw1BU1J,GAAM,WACrB7N,GACE,mBAAS6N,EAAKD,MAAM,EAAKxB,OAAOE,UAAa,EAAKF,OAAOE,QAAQuB,EAAKD,IAAI2D,mBAC1E,iBAAM,iDAA0CiH,KAAKC,UAAU5K,EAAKD,IAA9D,kCACiB,EAAKxB,OAAOE,QAAQuB,EAAKD,IAAIyD,MAD9C,kBAC6DxD,EAAKwD,MADlE,uBAKVmG,gBAh2BO,SAg2BS3J,GACd7N,GACE,wBAA0B0Y,IAAlB7K,EAAKI,WAA4C,IAAlBJ,EAAKe,aAC5C,iBAAM,sIAKV+J,OAx2BO,SAw2BA9K,GACL,IAAIrN,KAAK2I,WAAY0E,EAAK2D,WAA1B,CAIIhR,KAAKiN,QACPjN,KAAKoY,QAGP,IAAM3B,EAAYzW,KAAKyJ,WAAazJ,KAAK6I,KDruDtB,ICsuDf7I,KAAK4L,OAAOG,gBAAgBsB,EAAKD,KAChCpN,KAAKuN,WAAWF,GAEjBoJ,EACFzW,KAAKqY,YAAYhL,GAEjBrN,KAAKsY,cAAcjL,GAGrBrN,KAAKqP,mBAEDoH,EACFzW,KAAKkP,MAAM,SAAU7B,EAAKmD,IAAKxQ,KAAKoP,iBAEpCpP,KAAKkP,MAAM,WAAY7B,EAAKmD,IAAKxQ,KAAKoP,iBAGpCpP,KAAKuM,YAAYC,QAAUiK,IAAczW,KAAKiN,QAAUjN,KAAKiI,gBAC/DjI,KAAKmW,mBAGHnW,KAAKiN,QAAUjN,KAAKmI,gBACtBnI,KAAK+O,YAGD/O,KAAKwK,aACPxK,KAAKkQ,eAAgB,MAK3BkI,MAj5BO,WAi5BC,WACFpY,KAAKgO,WACHhO,KAAKiN,QAAUjN,KAAK4G,sBACtB5G,KAAK4L,OAAOI,gBAAkB,GAE9BhM,KAAK4L,OAAOI,gBAAkBhM,KAAK4L,OAAOI,gBAAgBmB,QAAO,SAAAsD,GAAM,OACrE,EAAK1D,QAAQ0D,GAAQO,cAIzBhR,KAAKqP,qBAKTgJ,YAh6BO,SAg6BKhL,GAAM,WAChB,GAAIrN,KAAKiN,QAAUjN,KAAK0I,mBACtB,OAAO1I,KAAKuY,SAASlL,GAGvB,GAAIrN,KAAK6I,KAaP,OAZA7I,KAAKuY,SAASlL,QAEVrN,KAAKuH,oBACP8F,EAAKO,UAAUtL,SAAQ,SAAAuL,GAChB,EAAKN,WAAWM,IAAcA,EAASmD,YAAY,EAAKuH,SAAS1K,MAE/D7N,KAAKwH,uBACdxH,KAAKsR,uBAAuBjE,GAAM,SAAAkE,GAC3B,EAAKhE,WAAWgE,IAAgBA,EAAWP,YAAY,EAAKuH,SAAShH,OAOhF,IAAMiH,EACJnL,EAAKG,SACmBH,EAAKgK,wBACNrX,KAAK+G,kCAc9B,GAZIyR,GACFxY,KAAKuY,SAASlL,GAGZA,EAAKe,UACPpO,KAAKsR,uBAAuBjE,GAAM,SAAAkE,GAC3BA,EAAWP,aAAc,EAAKjK,mCACjC,EAAKwR,SAAShH,MAKhBiH,EAEF,IADA,IAAIC,EAAOpL,ED9zDW,QC+zDdoL,EAAOA,EAAKjV,aACdiV,EAAKhL,SAASoG,MAAM7T,KAAKuN,aAAavN,KAAKuY,SAASE,IAO9DH,cAh9BO,SAg9BOjL,GAAM,WAClB,GAAIrN,KAAK0I,mBACP,OAAO1I,KAAK0Y,YAAYrL,GAG1B,GAAIrN,KAAK6I,KAaP,OAZA7I,KAAK0Y,YAAYrL,QAEbrN,KAAKqH,sBACPgG,EAAKO,UAAUtL,SAAQ,SAAAuL,GACjB,EAAKN,WAAWM,KAAcA,EAASmD,YAAY,EAAK0H,YAAY7K,MAEjE7N,KAAKsH,yBACdtH,KAAKsR,uBAAuBjE,GAAM,SAAAkE,GAC5B,EAAKhE,WAAWgE,KAAgBA,EAAWP,YAAY,EAAK0H,YAAYnH,OAOlF,IAAIoH,GAA8B,EAUlC,GATItL,EAAKe,UACPpO,KAAK4R,uBAAuBvE,GAAM,SAAAkE,GAC3BA,EAAWP,aAAc,EAAKjK,oCACjC,EAAK2R,YAAYnH,GACjBoH,GAA8B,MAMlCtL,EAAKG,QACiBmL,GACyB,IAAzBtL,EAAKI,SAASlL,OACpC,CACAvC,KAAK0Y,YAAYrL,GAGjB,IADA,IAAIoL,EAAOpL,ED72DW,QC82DdoL,EAAOA,EAAKjV,aACdxD,KAAKuN,WAAWkL,IAAOzY,KAAK0Y,YAAYD,KAMlDF,SA9/BO,SA8/BElL,GACPrN,KAAK4L,OAAOI,gBAAgB5J,KAAKiL,EAAKD,IACtCpN,KAAK4L,OAAOM,gBAAgBmB,EAAKD,KAAM,GAGzCsL,YAngCO,SAmgCKrL,GACVlM,EAAgBnB,KAAK4L,OAAOI,gBAAiBqB,EAAKD,WAC3CpN,KAAK4L,OAAOM,gBAAgBmB,EAAKD,KAG1CwL,gBAxgCO,WAygCL,GAAK5Y,KAAKgO,SAAV,CACA,GAAIhO,KAAKiN,OAAQ,OAAOjN,KAAKoY,QAC7B,IAAMS,EAAY3C,IAAQlW,KAAKgN,eACzB8L,EAAmB9Y,KAAK+M,QAAQ8L,GACtC7Y,KAAKmY,OAAOW,KAGd1C,uBAhhCO,WAihCL,IAAMrB,EAAQ/U,KAAK8U,UAEfC,IAAO/U,KAAKuL,KAAKG,mBAAqBqJ,EAAMrU,YAGlD2V,0BAthCO,WAuhCL,IAAMtB,EAAQ/U,KAAK8U,UAEfC,IAAOA,EAAMrU,UAAYV,KAAKuL,KAAKG,sBAI3CqN,QAv1Da,WAw1DX/Y,KAAK+P,cACL/P,KAAKiQ,cAGP+I,QA51Da,WA61DPhZ,KAAKmH,WAAWnH,KAAKwS,aACpBxS,KAAKmK,SAAYnK,KAAKkH,QAASlH,KAAKoH,qBAAqBpH,KAAKsW,kBAC/DtW,KAAKgH,YAAYhH,KAAK8O,WACtB9O,KAAKkH,OAASlH,KAAKsI,gBAAgBtI,KAAK0P,sBAG9CuJ,UAn2Da,WAq2DXjZ,KAAKgS,yBAAwB,KCh6DjC,eACA,2BAEA,cAEA,GAFA,kBCAe,SAASkH,GACtBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGA,IAoBIC,EApBAxP,EACuB,mBAAlBgP,EAA+BA,EAAchP,QAAUgP,EAuDhE,GApDIC,IACFjP,EAAQiP,OAASA,EACjBjP,EAAQkP,gBAAkBA,EAC1BlP,EAAQyP,WAAY,GAIlBN,IACFnP,EAAQ0P,YAAa,GAInBL,IACFrP,EAAQ2P,SAAW,UAAYN,GAI7BC,GAEFE,EAAO,SAAUI,IAEfA,EACEA,GACC/Z,KAAKga,QAAUha,KAAKga,OAAOC,YAC3Bja,KAAKka,QAAUla,KAAKka,OAAOF,QAAUha,KAAKka,OAAOF,OAAOC,aAEZ,oBAAxBE,sBACrBJ,EAAUI,qBAGRZ,GACFA,EAAa7b,KAAKsC,KAAM+Z,GAGtBA,GAAWA,EAAQK,uBACrBL,EAAQK,sBAAsBC,IAAIZ,IAKtCtP,EAAQmQ,aAAeX,GACdJ,IACTI,EAAOD,EACH,WACEH,EAAa7b,KACXsC,MACCmK,EAAQ0P,WAAa7Z,KAAKka,OAASla,MAAMua,MAAMC,SAASC,aAG7DlB,GAGFI,EACF,GAAIxP,EAAQ0P,WAAY,CAGtB1P,EAAQuQ,cAAgBf,EAExB,IAAIgB,EAAiBxQ,EAAQiP,OAC7BjP,EAAQiP,OAAS,SAAkCwB,EAAGb,GAEpD,OADAJ,EAAKjc,KAAKqc,GACHY,EAAeC,EAAGb,QAEtB,CAEL,IAAIc,EAAW1Q,EAAQ2Q,aACvB3Q,EAAQ2Q,aAAeD,EAAW,GAAGzD,OAAOyD,EAAUlB,GAAQ,CAACA,GAInE,MAAO,CACLtc,QAAS8b,EACThP,QAASA,GCtFb,IAWe,GAXC,GFIhB,CACArM,qCACAid,oBACAlB,cAEAT,OALA,SAKA4B,EAAAjB,GAAA,mBACA,wBAEA,gDAEA,8BAMA,OAJA,8BACAkB,sBAGA,4BACA,gCACA,aADA,gBAEAC,GACA,kCE/BI,OAAQ7B,GAWV,EACA,KACA,KACA,M,2BCVF,IACA5T,EACAA,EACAA,EACAA,GACAA,GACAA,GACAA,ICOe,GAXC,GDOhB,CACA3H,6BACAid,oBAEA5P,gBAAA,OACAgQ,WL6B+B,EK5B/B3c,WAGAoO,UACAwO,aADA,WAEA,oBAEA,OACA1U,eACA,YACAA,YAIA2U,WAXA,WAYA,OACArZ,gEAKA4M,OACA,+BADA,SACAC,GACA,cAGArQ,MALA,WAOA,2DAIAua,QAtCA,WAuCA,2BACA,uBLP+B,IKS/B,CAAAuC,WAAAC,eAIAzL,SACAsI,MADA,WAEA,cACA3T,QAAAjG,aAIAiU,MAPA,WAQA,cAEA,UACA,4CAIAE,KAfA,WAgBA,2CAGA6I,QAnBA,WAoBA,oBAEA9U,uBAEA,6BAGA+U,OA3BA,WA4BA,oBACA,cAIA,iCACA,oBAGA/U,uBACAA,eAGAgV,QAzCA,SAyCA9b,GACA,qBAEA,aAEA,EACA,0BAEA,gCACA,2BAKA+b,UAvDA,SAuDA/b,GACA,oBAGA,gCAEA,kDAGA,2BAEA,OADAA,mBACA,aAGA,UACA,OACA,wCACA8G,oBAEA,MAEA,OAEA,GADA9G,mBACA,6BACA,gCACA,2CACA8G,YACA,MAEA,OACA,kBACA,aACA,eACAA,cAEA,MAEA,OACA9G,mBACA8G,wBACA,MAEA,OACA9G,mBACA8G,yBACA,MAEA,QACA,gCACA,+BACA9G,mBACA8G,sBACA,2DACA9G,mBACA8G,6CAEA,MAEA,QACA9G,mBACA8G,wBACA,MAEA,QACA,gCACA,iCACA9G,mBACA8G,qBAEA,MAEA,QACA9G,mBACA8G,wBACA,MAEA,QACA,qCACAA,oBAEA,MAEA,QAEAA,gBAKAkV,YAhJA,SAgJAhc,GAEA,mBAGAA,qBAIAic,qBAzJA,WAyJA,0BACA,gBACA,KACA,KA0BA,OAxBA,4BACApO,2BACA,+CAGA,cACAjJ,KACAsX,IACArJ,mBACAE,iBACAoJ,wBAEAC,cAIA,0BACAxX,KACAyX,OACAlR,uBAMA,6DACA0C,KAKAyO,YA7LA,WA6LA,0BACA,gBAEA,OACA,uBACA,8BADA,OAEA,YACA,mBACA,oBACA,kCALA,gBAMA,YACA,sBAPA,UAQA,aARA,MASA,aATA,KAUA,YAVA,QAWA,eAXA,UAYA,qBAKAC,YAlNA,WAmNA,OACA,EAFA,qBAEA,iEAIAC,iBAxNA,WAyNA,yBLrO+B,EKuO/B,kCAIAC,kBA/NA,WAgOA,cAEA3V,iCAIA0S,OApRA,WAqRA,0CCnSI,OAAQ,GAWV,EACA,KACA,KACA,M,QCIa,GAXC,GCNhB,CACAtb,mCACAid,oBAEA3B,OAJA,WAIA,mBACA,gBACA,GACA,iCACA,2CACA,gEAGA,OACA,mBACA1S,uBDfI,OAAQ,GAWV,EACA,KACA,KACA,M,QEIa,GAXC,GCHhB,CACA5I,oCACAid,oBACAjL,SACAwM,uBADA,WAEA,oBACA,qBAEA,gCACA,SACAC,GAAAlP,SACAA,UAGA+L,OAdA,WAcA,mBACA,gBAAI,EAAJ,kCACA,qCAEA,UACAoD,GACA,gDACA,gCAGA,MACA,6BD7BI,OAAQ,GAWV,EACA,KACA,KACA,M,QEdE,GAAS,WACX,IACEC,EADQzc,KACC0c,MAAMD,GACjB,OAAOA,EACL,MACA,CACER,MAAO,CACLU,MAAO,6BACPC,QAAS,wBAGb,CACEH,EAAG,OAAQ,CACTR,MAAO,CACLpe,EAAG,4gBAOb,GAAOgf,eAAgB,ECdvB,ICWe,GAXC,GDAhB,CACA/e,0BCCE,GFWoB,IETpB,EACA,KACA,KACA,M,QCIa,GAXC,GCHhB,CACAA,wCACAid,oBAEApU,OACA0G,MACAxN,YACAwK,cAIAyF,SACA8C,8BACA,oBAAI,EAAJ,UAGAlM,gBAIA0S,OApBA,WAoBA,mBACA,gBAAI,EAAJ,UACA,GACA,sCACA,yDACA,gDAEA,gCACA,OAAA/L,SAAA,QAEA,OACA,8DACA,uDACA,0DACA,yFDtCI,OAAQ,GAWV,EACA,KACA,KACA,M,QEIa,GAXC,GCFhB,CACAvP,mCACAid,oBAEAjL,SACAgN,sBADA,WACA,0BACA,gBAEA,uBACA5P,MAAA,EAAAxG,SACAoG,IAAApG,WACAoG,KAAA,mBACA,gEAIAiQ,qBAZA,WAYA,0BACA,gBACA,iCAEA,iBAGA,0GACA,wEAMA3D,OA9BA,WA8BA,mBACA,oCACA,GACAzS,OACAqW,UACAlf,oDACAmf,YAIA,SACA,sEACA,6BACA,4BACA,0BACA,0CDlDI,OAAQ,GAWV,EACA,KACA,KACA,M,QEdE,GAAS,WACX,IACER,EADQzc,KACC0c,MAAMD,GACjB,OAAOA,EACL,MACA,CACER,MAAO,CACLU,MAAO,6BACPC,QAAS,wBAGb,CACEH,EAAG,OAAQ,CACTR,MAAO,CACLpe,EAAG,wUAOb,GAAOgf,eAAgB,ECdvB,ICDA,SCYe,GAXC,GFAhB,CACA/e,8BECE,GHWoB,IGTpB,EACA,KACA,KACA,M,QCIa,GAXC,GCAhB,CACAA,+BACAid,oBAEAnO,UAMAsQ,YANA,WAOA,oBAEA,OACAxW,cACA,YACAA,aACA,mDAQAyW,gBArBA,WAsBA,oBAEA,sBAGA,eAOAC,mBAlCA,WAmCA,oBAEA,OACA1W,YACAA,kCAAA,oCAMAoJ,SACAuN,QADA,WACA,0BACA,gBACA,6CAEA,wBAGA,sGACA,oCAJA,MASAC,YAdA,WAcA,0BAEA,GACA,mCACA,yCAHA,cAGA,aAGA,4BAGA,sGACA,kBAJA,MASAC,kCAUA3d,oBACAA,mBAEA,oBACA,qBACA,cACA,cAGA,OAEA8X,UAGA8F,uBAAA,oBAQAC,sCACA7d,mBACAA,oBAEA,oBAGA8G,eACAA,kBAIAgX,qBA1EA,SA0EAjQ,GACA,OACA,EAFA,qBAEA,iDACAA,MAMA2L,OApIA,WAoIA,mBACA,gBACA,iBAEA,OACA,4EACA,6BACA,eACA,4BDnJI,OAAQ,GAWV,EACA,KACA,KACA,M,QEIa,GAXC,GCNhB,CACAtb,2BACA+b,cAEAlT,OACA9G,MACAA,YACAwK,aAEAsT,MACA9d,YACAwK,cAIA+O,OAfA,SAeA4B,EAAAjB,GAAA,mBACA,UAAI,EAAJ,WAEA,OACA,8EACA,kDACA,2DAEA,yFACAtM,aDzBI,OAAQ,GAWV,EACA,KACA,KACA,M,QJNF,IACA3P,8BACAid,oBAEApU,OACA0G,MACAxN,YACAwK,cAIAuC,UACAyB,aADA,WAEA,oBAAI,EAAJ,UAEA,sCAGAuP,WAPA,WAQA,oBAAI,EAAJ,UAEA,qCAIA9N,SACA+N,aADA,WACA,0BACA,gBAAI,EAAJ,UAUA,OACA,eAVA,CACA,4BACA,gDACA,mDACA,oDACA,oEACA,iDAIA,qEACA,mBACA,2BACA,8BACA,wBAEA,wBAMAC,qBAzBA,WAyBA,0BACA,yBAGA,wCACA,wBACA,2BACA,gCACA,uCAPA,MAYAR,YAtCA,WAsCA,0BACA,gBAAI,EAAJ,UAEA,uDAEA,eACA,IAMA,GACA,kCACA,2DAGA,OACA,qGACA,eAbA,CACA3W,OACA7I,6CACAmf,YAUA,CACA,oBASA,yBACA,QACA,mEAGA,IAGA,MAGAc,qBA9EA,SA8EAtQ,GACA,OACA,EAFA,qBAEA,qGACAA,KAKAuQ,wBAtFA,SAsFAvQ,GAAA,0BACA,gBAAI,EAAJ,UAEA,iBACA,iCADA,KAIA,sDACAA,KAKAwQ,eAnGA,WAmGA,0BACA,gBAAI,EAAJ,UACA,iCACA,GACA,8BACA,oCpBnIuB,IoBmIvB,EACA,0CpBrI6B,IoBqI7B,EACA,sCpBvIyB,IoBuIzB,EACA,mDAUA,OAPA,QACA,gDAEA,QACA,gDAIA,oBACAC,GACAC,MAKAC,YA7HA,WA6HA,0BACA,gBAAI,EAAJ,UACA,EACA/Q,kCACA3G,4BACAA,aAGA,IACAA,qBACAA,4CACA2G,uBACAgR,IAGA,iCAEA,YACAhR,OACAiR,kBACAnV,QACAoV,eARA,wBASAC,eARA,0BAYA,iBAbA,yBAaA,CACAnR,QACAiR,GACA,gBAfA,yBAeA,gBAMAG,iBAhKA,WAgKA,0BACA,YAEA,iCAEA,mCACA,mCAHA,MAOAC,oBA1KA,WA0KA,0BACA,gBAAI,EAAJ,UAEA,yDAGA,sEAIAC,yBApLA,WAoLA,0BACA,gBAEA,OAFA,UAEA,yBAGA,6DAHA,MAOAC,8BA9LA,WA8LA,0BACA,gBAAI,EAAJ,UAEA,qCAGA,0CACAvR,8BACA,6GACA3G,gBANA,MAYAmY,uBA7MA,SA6MAjf,GACA,oBAAI,EAAJ,UAIA,4BAEA8G,qCAGA+W,qCACA,oBAAI,EAAJ,UAEA/W,uBAGAoY,8CACA,oBAAI,EAAJ,UAEA,iCACApY,oBAEAA,eAIAqY,qCACA,oBAAI,EAAJ,UAEArY,6BAIA0S,OAvQA,WAuQA,mBACA,YACA,+CACA,OACA,gCADA,uCAEA4F,IAAA,GAEA,GACArY,OACA7I,0CAIA,OACA,mBACA,oBACAuP,YACA,kBACA,kCM/Qe,GAXC,GNmShB,QM1SI,OAAQ,GAWV,EACA,KACA,KACA,M,QCRF,IACArM,UACAP,gBACAwe,YACAC,gBCQe,GAXC,GDMhB,CACAphB,4BACAid,oBAEAnO,UACAuS,UADA,WAIA,OACA3V,UAHA,cAGAA,iBAIA4V,mBATA,WAUA,oBAEA,OACAlU,uCAKA0D,OACA,uBADA,SACAC,GACA,EAEA,gCAEA,qBAKAkK,QAjCA,WAkCA,0BACA,6CAGAC,QAtCA,WAuCA,cAEA,8CAGAC,UA5CA,WA6CA,oBAGAnJ,SACAuP,WADA,WACA,0BACA,gBAEA,qBAGA,yGACA,wBACA3Y,QACA,kCACAA,qBACA,kCACA,6BACA,yBAVA,MAeA4Y,iBAnBA,WAoBA,IACA,EADA,cACA,4BAEA,SACAC,IACA,MAGAC,gBA5BA,WA6BA,IACA,EADA,cACA,2BAEA,SACAC,IACA,MAGAC,sBArCA,WAsCA,oBAEA,qCACA,+BACA,iCACA,wCACA,oEACA,mCAEA,yBAIAC,2BAnDA,WAoDA,oBAEA,qCACA,+BACA,iCACA,wCACA,oEACA,mCACA,wBACA,0BAEA,yBAIAC,2BAnEA,WAoEA,oBACA,2BACA,gDACA,OAEA1L,kCAEA,SACA,6BACA,YACA,+BACA,eACA,wCACA,EACA,0BAEA,yBAIA2L,iBAxFA,WAwFA,0BACA,gBAEA,OACA,wCACAnZ,4CAAA,OACA,sCAMAoZ,sBApGA,WAoGA,0BACA,gBAEA,OACA,0EAIAC,wBA5GA,WA4GA,0BACA,gBAEA,OACA,8DAIAC,iCApHA,WAoHA,0BACA,gBAEA,OACA,0CACAtZ,iCACA,+FACAA,iBAMAuZ,iCAjIA,WAiIA,0BACA,gBACA,2BAIA,OACA,0CACA/L,eACA,kGACAxN,iBAMAwZ,4BAjJA,WAiJA,0BACA,gBAEA,OACA,oEAIAC,mBAzJA,WAyJA,0BACA,gBAEA,OACA,oEAIAC,WAjKA,WAkKA,+BACA,4BACA,+CAGAC,YAvKA,WAwKA,6BACA,gDAGAC,wBA5KA,WA6KA,oBACA,kBAEA,kBACA,iBACA,4BACA,4BACA,WACA,qBACA,QAMA,EALA,4BAKA,E3BxM2B,G2ByM3B,M3BzM2B,G2BqM3BC,oBACAA,oBAOA,yBACA7Z,qCAEAA,iBADA,MACAA,SAEAA,MANAA,gBAUA8Z,qBA1MA,WA2MA,IACA,EADA,cACA,UAGA,uBAEA,sBACAC,4CAIAC,uCAtNA,WAuNA,IACA,EADA,cACA,aAGA,yCAEA,wCACAD,4CAIAE,sBAlOA,WAmOA,uBAEA,8BACA,4BAGAC,wCAzOA,WA0OA,yCAEA,gDACA,+CAIAxH,OAjSA,WAiSA,mBACA,OACA,qGACA,kEACA,6BClTI,OAAQ,GAWV,EACA,KACA,KACA,M,2PCTF,IA+HA,GA/HA,IACAtb,qCACAid,oBAEAnM,OACA,uBADA,SACAC,GACA,EACA,qBAEA,uBAIA,0BATA,WAUA,mCAIAkK,QAlBA,WAmBA,+CACA,8BAGAC,QAvBA,WAwBA,cAEA,mCAGAlJ,SACA+Q,cADA,WAEA,mBACA,iCACA,iDACA,gCAGAC,eARA,WASA,kDACA,iCAGAC,0CAbA,WAcA,IACA,EADA,cACA,aAGA,4CAEA,2CACAN,8CAIAO,wBAzBA,WAyBA,WAEA,EADA,cACA,aAGA,0BAEA,yBACAP,uBACA,gBACA,oCAKAQ,2CAxCA,WAyCA,4CAEA,mDACA,iDAGAC,yBA/CA,WAgDA,0BAEA,iCACA,+BAGAC,YAtDA,WAuDA,oBACA,WAEA,EADA,eACA,wBAEAC,4BAGAC,0BA/DA,WAgEA,oBACA,iBACA,WACA,4BACA,4BACA,yCACA,iCACA,iCACA,8CAEA,EADA,8DACA,gDAGAjC,4CAIAhG,OA9GA,WA8GA,mBACA,gBACA,mDACA,GAAAlO,iBAEA,OACA,wEACA,sBAKA+N,UA1HA,WA2HA,wBC9Ge,GAXC,GD+HhB,CACAnb,mCAEAib,QAHA,WAIA,wBAGAC,QAPA,WAQA,cAGAC,UAXA,WAYA,iBAGAnJ,SACAwR,MADA,WAEA,oCACA3e,6BAEA,2B,mWAAA,EACA4e,KACArH,aACAsH,MAIAC,SAZA,WAaA9e,iDACA,mCAEA,6BACA,yBAIAyW,OApCA,WAoCA,mBAKA,OAJA,QACA,qDAGA,UC/KI,OAAQ,GAWV,EACA,KACA,KACA,M,QCIa,GAXC,GCAhB,CACAtb,sBACA4jB,YAEA9U,UACA+U,aADA,WAEA,OACA,oBACA,qCACA,sCACA,6CACA,yCACA,iDACA,0CACA,wCACA,yDACA,4DACA,gEACA,sDAKAvI,OAvBA,WAuBA,mBACA,OACA,iDACA,MACA,sBACA,mEDnCI,OAAQ,GAWV,EACA,KACA,KACA,M,QEDWwI,I,MATEC,aASQC","file":"vue-treeselect.cjs.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"babel-helper-vue-jsx-merge-props\");","module.exports = require(\"@babel/runtime/helpers/toConsumableArray\");","module.exports = require(\"lodash/noop\");","module.exports = require(\"lodash/debounce\");","module.exports = require(\"is-promise\");","module.exports = require(\"lodash/once\");","module.exports = require(\"lodash/identity\");","module.exports = require(\"lodash/constant\");","module.exports = require(\"lodash/last\");","module.exports = require(\"@babel/runtime/helpers/slicedToArray\");","module.exports = require(\"fuzzysearch\");","module.exports = require(\"watch-size\");","module.exports = require(\"@babel/runtime/helpers/typeof\");","module.exports = require(\"vue\");","import { noop } from './noop'\n\nexport const warning = process.env.NODE_ENV === 'production'\n  ? /* istanbul ignore next */ noop\n  : function warning(checker, complainer) {\n    if (!checker()) {\n      const message = [ '[Vue-Treeselect Warning]' ].concat(complainer())\n      // eslint-disable-next-line no-console\n      console.error(...message)\n    }\n  }\n","export function onLeftClick(mouseDownHandler) {\n  return function onMouseDown(evt, ...args) {\n    if (evt.type === 'mousedown' && evt.button === 0) {\n      mouseDownHandler.call(this, evt, ...args)\n    }\n  }\n}\n","// from react-select\nexport function scrollIntoView($scrollingEl, $focusedEl) {\n  const scrollingReact = $scrollingEl.getBoundingClientRect()\n  const focusedRect = $focusedEl.getBoundingClientRect()\n  const overScroll = $focusedEl.offsetHeight / 3\n\n  if (focusedRect.bottom + overScroll > scrollingReact.bottom) {\n    $scrollingEl.scrollTop = Math.min(\n      $focusedEl.offsetTop + $focusedEl.clientHeight - $scrollingEl.offsetHeight + overScroll,\n      $scrollingEl.scrollHeight,\n    )\n  } else if (focusedRect.top - overScroll < scrollingReact.top) {\n    $scrollingEl.scrollTop = Math.max($focusedEl.offsetTop - overScroll, 0)\n  }\n}\n","import watchSizeForBrowsersOtherThanIE9 from 'watch-size'\nimport { removeFromArray } from './removeFromArray'\n\nlet intervalId\nconst registered = []\nconst INTERVAL_DURATION = 100\n\nfunction run() {\n  intervalId = setInterval(() => {\n    registered.forEach(test)\n  }, INTERVAL_DURATION)\n}\n\nfunction stop() {\n  clearInterval(intervalId)\n  intervalId = null\n}\n\nfunction test(item) {\n  const { $el, listener, lastWidth, lastHeight } = item\n  const width = $el.offsetWidth\n  const height = $el.offsetHeight\n\n  if (lastWidth !== width || lastHeight !== height) {\n    item.lastWidth = width\n    item.lastHeight = height\n\n    listener({ width, height })\n  }\n}\n\nfunction watchSizeForIE9($el, listener) {\n  const item = {\n    $el,\n    listener,\n    lastWidth: null,\n    lastHeight: null,\n  }\n  const unwatch = () => {\n    removeFromArray(registered, item)\n    if (!registered.length) stop()\n  }\n\n  registered.push(item)\n  // The original watch-size will call the listener on initialization.\n  // Keep the same behavior here.\n  test(item)\n  run()\n\n  return unwatch\n}\n\nexport function watchSize($el, listener) {\n  // See: https://stackoverflow.com/a/31293352\n  const isIE9 = document.documentMode === 9\n  // watch-size will call the listener on initialization.\n  // Disable this behavior with a lock to achieve a clearer code logic.\n  let locked = true\n  const wrappedListener = (...args) => locked || listener(...args)\n  const implementation = isIE9\n    ? watchSizeForIE9\n    : watchSizeForBrowsersOtherThanIE9\n  const removeSizeWatcher = implementation($el, wrappedListener)\n  locked = false // unlock after initialization\n\n  return removeSizeWatcher\n}\n","export function removeFromArray(arr, elem) {\n  const idx = arr.indexOf(elem)\n  if (idx !== -1) arr.splice(idx, 1)\n}\n","function findScrollParents($el) {\n  const $scrollParents = []\n  let $parent = $el.parentNode\n\n  while ($parent && $parent.nodeName !== 'BODY' && $parent.nodeType === document.ELEMENT_NODE) {\n    if (isScrollElment($parent)) $scrollParents.push($parent)\n    $parent = $parent.parentNode\n  }\n  $scrollParents.push(window)\n\n  return $scrollParents\n}\n\nfunction isScrollElment($el) {\n  // Firefox wants us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getComputedStyle($el)\n  return /(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)\n}\n\nexport function setupResizeAndScrollEventListeners($el, listener) {\n  const $scrollParents = findScrollParents($el)\n\n  window.addEventListener('resize', listener, { passive: true })\n  $scrollParents.forEach(scrollParent => {\n    scrollParent.addEventListener('scroll', listener, { passive: true })\n  })\n\n  return function removeEventListeners() {\n    window.removeEventListener('resize', listener, { passive: true })\n    $scrollParents.forEach($scrollParent => {\n      $scrollParent.removeEventListener('scroll', listener, { passive: true })\n    })\n  }\n}\n","export function isNaN(x) {\n  return x !== x\n}\n","export const createMap = () => Object.create(null)\n","function isPlainObject(value) {\n  if (value == null || typeof value !== 'object') return false\n  return Object.getPrototypeOf(value) === Object.prototype\n}\n\nfunction copy(obj, key, value) {\n  if (isPlainObject(value)) {\n    obj[key] || (obj[key] = {})\n    deepExtend(obj[key], value)\n  } else {\n    obj[key] = value\n  }\n}\n\nexport function deepExtend(target, source) {\n  if (isPlainObject(source)) {\n    const keys = Object.keys(source)\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n      copy(target, keys[i], source[keys[i]])\n    }\n  }\n\n  return target\n}\n","export function includes(arrOrStr, elem) {\n  return arrOrStr.indexOf(elem) !== -1\n}\n","export function find(arr, predicate, ctx) {\n  for (let i = 0, len = arr.length; i < len; i++) {\n    if (predicate.call(ctx, arr[i], i, arr)) return arr[i]\n  }\n  return undefined\n}\n","export function quickDiff(arrA, arrB) {\n  if (arrA.length !== arrB.length) return true\n\n  for (let i = 0; i < arrA.length; i++) {\n    if (arrA[i] !== arrB[i]) return true\n  }\n\n  return false\n}\n","// Magic value that indicates a root level node.\nexport const NO_PARENT_NODE = null\n\n// Types of checked state.\nexport const UNCHECKED = 0\nexport const INDETERMINATE = 1\nexport const CHECKED = 2\n\n// Types of count number.\nexport const ALL_CHILDREN = 'ALL_CHILDREN'\nexport const ALL_DESCENDANTS = 'ALL_DESCENDANTS'\nexport const LEAF_CHILDREN = 'LEAF_CHILDREN'\nexport const LEAF_DESCENDANTS = 'LEAF_DESCENDANTS'\n\n// Action types of delayed loading.\nexport const LOAD_ROOT_OPTIONS = 'LOAD_ROOT_OPTIONS'\nexport const LOAD_CHILDREN_OPTIONS = 'LOAD_CHILDREN_OPTIONS'\nexport const ASYNC_SEARCH = 'ASYNC_SEARCH'\n\n// Acceptable values of `valueConsistsOf` prop.\nexport const ALL = 'ALL'\nexport const BRANCH_PRIORITY = 'BRANCH_PRIORITY'\nexport const LEAF_PRIORITY = 'LEAF_PRIORITY'\nexport const ALL_WITH_INDETERMINATE = 'ALL_WITH_INDETERMINATE'\n\n// Acceptable values of `sortValueBy` prop.\nexport const ORDER_SELECTED = 'ORDER_SELECTED'\nexport const LEVEL = 'LEVEL'\nexport const INDEX = 'INDEX'\n\n// Key codes look-up table.\nexport const KEY_CODES = {\n  BACKSPACE: 8,\n  ENTER: 13,\n  ESCAPE: 27,\n  END: 35,\n  HOME: 36,\n  ARROW_LEFT: 37,\n  ARROW_UP: 38,\n  ARROW_RIGHT: 39,\n  ARROW_DOWN: 40,\n  DELETE: 46,\n}\n\n// Other constants.\nexport const INPUT_DEBOUNCE_DELAY = process.env.NODE_ENV === 'testing'\n  ? /* to speed up unit testing */ 10\n  : /* istanbul ignore next */ 200\nexport const MIN_INPUT_WIDTH = 5\nexport const MENU_BUFFER = 40\n","import fuzzysearch from 'fuzzysearch'\n\nimport {\n  warning,\n  onLeftClick, scrollIntoView,\n  isNaN, isPromise, once,\n  identity, constant, createMap,\n  quickDiff, last as getLast, includes, find, removeFromArray,\n} from '../utils'\n\nimport {\n  NO_PARENT_NODE,\n  UNCHECKED, INDETERMINATE, CHECKED,\n  LOAD_ROOT_OPTIONS, LOAD_CHILDREN_OPTIONS, ASYNC_SEARCH,\n  ALL, BRANCH_PRIORITY, LEAF_PRIORITY, ALL_WITH_INDETERMINATE,\n  ALL_CHILDREN, ALL_DESCENDANTS, LEAF_CHILDREN, LEAF_DESCENDANTS,\n  ORDER_SELECTED, LEVEL, INDEX,\n} from '../constants'\n\nfunction sortValueByIndex(a, b) {\n  let i = 0\n  do {\n    if (a.level < i) return -1\n    if (b.level < i) return 1\n    if (a.index[i] !== b.index[i]) return a.index[i] - b.index[i]\n    i++\n  } while (true)\n}\n\nfunction sortValueByLevel(a, b) {\n  return a.level === b.level\n    ? sortValueByIndex(a, b)\n    : a.level - b.level\n}\n\nfunction createAsyncOptionsStates() {\n  return {\n    isLoaded: false,\n    isLoading: false,\n    loadingError: '',\n  }\n}\n\nfunction stringifyOptionPropValue(value) {\n  if (typeof value === 'string') return value\n  if (typeof value === 'number' && !isNaN(value)) return value + ''\n  // istanbul ignore next\n  return ''\n}\n\nfunction match(enableFuzzyMatch, needle, haystack) {\n  return enableFuzzyMatch\n    ? fuzzysearch(needle, haystack)\n    : includes(haystack, needle)\n}\n\nfunction getErrorMessage(err) {\n  return err.message || /* istanbul ignore next */String(err)\n}\n\nlet instanceId = 0\n\nexport default {\n  provide() {\n    return {\n      // Enable access to the instance of root component of vue-treeselect\n      // across hierarchy.\n      instance: this,\n    }\n  },\n\n  props: {\n    /**\n     * Whether to allow resetting value even if there are disabled selected nodes.\n     */\n    allowClearingDisabled: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * When an ancestor node is selected/deselected, whether its disabled descendants should be selected/deselected.\n     * You may want to use this in conjunction with `allowClearingDisabled` prop.\n     */\n    allowSelectingDisabledDescendants: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Whether the menu should be always open.\n     */\n    alwaysOpen: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Append the menu to <body />?\n     */\n    appendToBody: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Whether to enable async search mode.\n     */\n    async: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Automatically focus the component on mount?\n     */\n    autoFocus: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Automatically load root options on mount. When set to `false`, root options will be loaded when the menu is opened.\n     */\n    autoLoadRootOptions: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * When user deselects a node, automatically deselect its ancestors. Applies to flat mode only.\n     */\n    autoDeselectAncestors: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * When user deselects a node, automatically deselect its descendants. Applies to flat mode only.\n     */\n    autoDeselectDescendants: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * When user selects a node, automatically select its ancestors. Applies to flat mode only.\n     */\n    autoSelectAncestors: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * When user selects a node, automatically select its descendants. Applies to flat mode only.\n     */\n    autoSelectDescendants: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Whether pressing backspace key removes the last item if there is no text input.\n     */\n    backspaceRemoves: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Function that processes before clearing all input fields.\n     * Return `false` to prevent value from being cleared.\n     * @type {function(): (boolean|Promise<boolean>)}\n     */\n    beforeClearAll: {\n      type: Function,\n      default: constant(true),\n    },\n\n    /**\n     * Show branch nodes before leaf nodes?\n     */\n    branchNodesFirst: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Should cache results of every search request?\n     */\n    cacheOptions: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Show an \"×\" button that resets value?\n     */\n    clearable: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Title for the \"×\" button when `multiple: true`.\n     */\n    clearAllText: {\n      type: String,\n      default: 'Clear all',\n    },\n\n    /**\n     * Whether to clear the search input after selecting.\n     * Use only when `multiple` is `true`.\n     * For single-select mode, it **always** clears the input after selecting an option regardless of the prop value.\n     */\n    clearOnSelect: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Title for the \"×\" button.\n     */\n    clearValueText: {\n      type: String,\n      default: 'Clear value',\n    },\n\n    /**\n     * Whether to close the menu after selecting an option?\n     * Use only when `multiple` is `true`.\n     */\n    closeOnSelect: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * How many levels of branch nodes should be automatically expanded when loaded.\n     * Set `Infinity` to make all branch nodes expanded by default.\n     */\n    defaultExpandLevel: {\n      type: Number,\n      default: 0,\n    },\n\n    /**\n     * The default set of options to show before the user starts searching. Used for async search mode.\n     * When set to `true`, the results for search query as a empty string will be autoloaded.\n     * @type {boolean|node[]}\n     */\n    defaultOptions: {\n      default: false,\n    },\n\n    /**\n     * Whether pressing delete key removes the last item if there is no text input.\n     */\n    deleteRemoves: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Delimiter to use to join multiple values for the hidden field value.\n     */\n    delimiter: {\n      type: String,\n      default: ',',\n    },\n\n    /**\n     * Only show the nodes that match the search value directly, excluding its ancestors.\n     *\n     * @type {Object}\n     */\n    flattenSearchResults: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Prevent branch nodes from being selected?\n     */\n    disableBranchNodes: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Disable the control?\n     */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Disable the fuzzy matching functionality?\n     */\n    disableFuzzyMatching: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Whether to enable flat mode or not. Non-flat mode (default) means:\n     *   - Whenever a branch node gets checked, all its children will be checked too\n     *   - Whenever a branch node has all children checked, the branch node itself will be checked too\n     * Set `true` to disable this mechanism\n     */\n    flat: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Whether to enably pagination loading\n     */\n\n    isPaginated: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Will be passed with all events as the last param.\n     * Useful for identifying events origin.\n    */\n    instanceId: {\n      // Add two trailing \"$\" to distinguish from explictly specified ids.\n      default: () => `${instanceId++}$$`,\n      type: [ String, Number ],\n    },\n\n    /**\n     * Joins multiple values into a single form field with the `delimiter` (legacy mode).\n    */\n    joinValues: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Limit the display of selected options.\n     * The rest will be hidden within the limitText string.\n     */\n    limit: {\n      type: Number,\n      default: Infinity,\n    },\n\n    /**\n     * Function that processes the message shown when selected elements pass the defined limit.\n     * @type {function(number): string}\n     */\n    limitText: {\n      type: Function,\n      default: function limitTextDefault(count) { // eslint-disable-line func-name-matching\n        return `and ${count} more`\n      },\n    },\n\n    /**\n     * Text displayed when loading options.\n     */\n    loadingText: {\n      type: String,\n      default: 'Loading...',\n    },\n\n    /**\n     * Used for dynamically loading options.\n     * @type {function({action: string, callback: (function((Error|string)=): void), parentNode: node=, instanceId}): void}\n     */\n    loadOptions: {\n      type: Function,\n    },\n\n    /**\n     * Which node properties to filter on.\n     */\n    matchKeys: {\n      type: Array,\n      default: constant([ 'label' ]),\n    },\n\n    /**\n     * Sets `maxHeight` style value of the menu.\n     */\n    maxHeight: {\n      type: Number,\n      default: 300,\n    },\n\n    /**\n     * Set `true` to allow selecting multiple options (a.k.a., multi-select mode).\n     */\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Generates a hidden <input /> tag with this field name for html forms.\n     */\n    name: {\n      type: String,\n    },\n\n    /**\n     * Text displayed when a branch node has no children.\n     */\n    noChildrenText: {\n      type: String,\n      default: 'No sub-options.',\n    },\n\n    /**\n     * Text displayed when there are no available options.\n     */\n    noOptionsText: {\n      type: String,\n      default: 'No options available.',\n    },\n\n    /**\n     * Text displayed when there are no matching search results.\n     */\n    noResultsText: {\n      type: String,\n      default: 'No results found...',\n    },\n\n    /**\n     * Used for normalizing source data.\n     * @type {function(node, instanceId): node}\n     */\n    normalizer: {\n      type: Function,\n      default: identity,\n    },\n\n    /**\n     * By default (`auto`), the menu will open below the control. If there is not\n     * enough space, vue-treeselect will automatically flip the menu.\n     * You can use one of other four options to force the menu to be always opened\n     * to specified direction.\n     * Acceptable values:\n     *   - `\"auto\"`\n     *   - `\"below\"`\n     *   - `\"bottom\"`\n     *   - `\"above\"`\n     *   - `\"top\"`\n     */\n    openDirection: {\n      type: String,\n      default: 'auto',\n      validator(value) {\n        const acceptableValues = [ 'auto', 'top', 'bottom', 'above', 'below' ]\n        return includes(acceptableValues, value)\n      },\n    },\n\n    /**\n     * Whether to automatically open the menu when the control is clicked.\n     */\n    openOnClick: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Whether to automatically open the menu when the control is focused.\n     */\n    openOnFocus: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Array of available options.\n     * @type {node[]}\n     */\n    options: {\n      type: Array,\n    },\n\n    /**\n     * Field placeholder, displayed when there's no value.\n     */\n    placeholder: {\n      type: String,\n      default: 'Select...',\n    },\n\n    /**\n     * Applies HTML5 required attribute when needed.\n     */\n    required: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Text displayed asking user whether to retry loading children options.\n     */\n    retryText: {\n      type: String,\n      default: 'Retry?',\n    },\n\n    /**\n     * Title for the retry button.\n     */\n    retryTitle: {\n      type: String,\n      default: 'Click to retry',\n    },\n\n    /**\n     * Enable searching feature?\n     */\n    searchable: {\n      type: Boolean,\n      default: true,\n    },\n\n    /**\n     * Search in ancestor nodes too.\n     */\n    searchNested: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Text tip to prompt for async search.\n     */\n    searchPromptText: {\n      type: String,\n      default: 'Type to search...',\n    },\n\n    /**\n     * Whether to show a children count next to the label of each branch node.\n     */\n    showCount: {\n      type: Boolean,\n      default: false,\n    },\n\n    /**\n     * Used in conjunction with `showCount` to specify which type of count number should be displayed.\n     * Acceptable values:\n     *   - \"ALL_CHILDREN\"\n     *   - \"ALL_DESCENDANTS\"\n     *   - \"LEAF_CHILDREN\"\n     *   - \"LEAF_DESCENDANTS\"\n     */\n    showCountOf: {\n      type: String,\n      default: ALL_CHILDREN,\n      validator(value) {\n        const acceptableValues = [ ALL_CHILDREN, ALL_DESCENDANTS, LEAF_CHILDREN, LEAF_DESCENDANTS ]\n        return includes(acceptableValues, value)\n      },\n    },\n\n    /**\n     * Whether to show children count when searching.\n     * Fallbacks to the value of `showCount` when not specified.\n     * @type {boolean}\n     */\n    showCountOnSearch: null,\n\n    /**\n     * In which order the selected options should be displayed in trigger & sorted in `value` array.\n     * Used for multi-select mode only.\n     * Acceptable values:\n     *   - \"ORDER_SELECTED\"\n     *   - \"LEVEL\"\n     *   - \"INDEX\"\n     */\n    sortValueBy: {\n      type: String,\n      default: ORDER_SELECTED,\n      validator(value) {\n        const acceptableValues = [ ORDER_SELECTED, LEVEL, INDEX ]\n        return includes(acceptableValues, value)\n      },\n    },\n\n    /**\n     * Tab index of the control.\n     */\n    tabIndex: {\n      type: Number,\n      default: 0,\n    },\n\n    /**\n     * The value of the control.\n     * Should be `id` or `node` object for single-select mode, or an array of `id` or `node` object for multi-select mode.\n     * Its format depends on the `valueFormat` prop.\n     * For most cases, just use `v-model` instead.\n     * @type {?Array}\n     */\n    value: null,\n\n    /**\n     * Which kind of nodes should be included in the `value` array in multi-select mode.\n     * Acceptable values:\n     *   - \"ALL\" - Any node that is checked will be included in the `value` array\n     *   - \"BRANCH_PRIORITY\" (default) - If a branch node is checked, all its descendants will be excluded in the `value` array\n     *   - \"LEAF_PRIORITY\" - If a branch node is checked, this node itself and its branch descendants will be excluded from the `value` array but its leaf descendants will be included\n     *   - \"ALL_WITH_INDETERMINATE\" - Any node that is checked will be included in the `value` array, plus indeterminate nodes\n     */\n    valueConsistsOf: {\n      type: String,\n      default: BRANCH_PRIORITY,\n      validator(value) {\n        const acceptableValues = [ ALL, BRANCH_PRIORITY, LEAF_PRIORITY, ALL_WITH_INDETERMINATE ]\n        return includes(acceptableValues, value)\n      },\n    },\n\n    /**\n     * Format of `value` prop.\n     * Note that, when set to `\"object\"`, only `id` & `label` properties are required in each `node` object in `value` prop.\n     * Acceptable values:\n     *   - \"id\"\n     *   - \"object\"\n     */\n    valueFormat: {\n      type: String,\n      default: 'id',\n    },\n\n    /**\n     * z-index of the menu.\n     */\n    zIndex: {\n      type: [ Number, String ],\n      default: 999,\n    },\n  },\n\n  data() {\n    return {\n      trigger: {\n        // Is the control focused?\n        isFocused: false,\n        // User entered search query - value of the input.\n        searchQuery: '',\n      },\n\n      menu: {\n        // Is the menu opened?\n        isOpen: false,\n        // Id of current highlighted option.\n        current: null,\n        // The scroll position before last menu closing.\n        lastScrollPosition: 0,\n        // Which direction to open the menu.\n        placement: 'bottom',\n      },\n\n      forest: {\n        // Normalized options.\n        normalizedOptions: [],\n        // <id, node> map for quick look-up.\n        nodeMap: createMap(),\n        // <id, checkedState> map, used for multi-select mode.\n        checkedStateMap: createMap(),\n        // Id list of all selected options.\n        selectedNodeIds: this.extractCheckedNodeIdsFromValue(),\n        // <id, true> map for fast checking:\n        //   if (forest.selectedNodeIds.indexOf(id) !== -1) forest.selectedNodeMap[id] === true\n        selectedNodeMap: createMap(),\n      },\n\n      // States of root options.\n      rootOptionsStates: createAsyncOptionsStates(),\n\n      localSearch: {\n        // Has user entered any query to search local options?\n        active: false,\n        // Has any options matched the search query?\n        noResults: true,\n        // <id, countObject> map for counting matched children/descendants.\n        countMap: createMap(),\n      },\n\n      // <searchQuery, remoteSearchEntry> map.\n      remoteSearch: createMap(),\n    }\n  },\n\n  computed: {\n    /* eslint-disable valid-jsdoc */\n    /**\n     * Normalized nodes that have been selected.\n     * @type {node[]}\n     */\n    selectedNodes() {\n      return this.forest.selectedNodeIds.map(this.getNode)\n    },\n    /**\n     * Id list of selected nodes with `sortValueBy` prop applied.\n     * @type {nodeId[]}\n     */\n    internalValue() {\n      let internalValue\n\n      // istanbul ignore else\n      if (this.single || this.flat || this.disableBranchNodes || this.valueConsistsOf === ALL) {\n        internalValue = this.forest.selectedNodeIds.slice()\n      } else if (this.valueConsistsOf === BRANCH_PRIORITY) {\n        internalValue = this.forest.selectedNodeIds.filter(id => {\n          const node = this.getNode(id)\n          if (node.isRootNode) return true\n          return !this.isSelected(node.parentNode)\n        })\n      } else if (this.valueConsistsOf === LEAF_PRIORITY) {\n        internalValue = this.forest.selectedNodeIds.filter(id => {\n          const node = this.getNode(id)\n          if (node.isLeaf) return true\n          return node.children.length === 0\n        })\n      } else if (this.valueConsistsOf === ALL_WITH_INDETERMINATE) {\n        const indeterminateNodeIds = []\n        internalValue = this.forest.selectedNodeIds.slice()\n        this.selectedNodes.forEach(selectedNode => {\n          selectedNode.ancestors.forEach(ancestor => {\n            if (includes(indeterminateNodeIds, ancestor.id)) return\n            if (includes(internalValue, ancestor.id)) return\n            indeterminateNodeIds.push(ancestor.id)\n          })\n        })\n        internalValue.push(...indeterminateNodeIds)\n      }\n\n      if (this.sortValueBy === LEVEL) {\n        internalValue.sort((a, b) => sortValueByLevel(this.getNode(a), this.getNode(b)))\n      } else if (this.sortValueBy === INDEX) {\n        internalValue.sort((a, b) => sortValueByIndex(this.getNode(a), this.getNode(b)))\n      }\n\n      return internalValue\n    },\n    /**\n     * Has any option been selected?\n     * @type {boolean}\n     */\n    hasValue() {\n      return this.internalValue.length > 0\n    },\n    /**\n     * Single-select mode?\n     * @type {boolean}\n     */\n    single() {\n      return !this.multiple\n    },\n    /**\n     * Id list of nodes displayed in the menu. Nodes that are considered NOT visible:\n     *   - descendants of a collapsed branch node\n     *   - in local search mode, nodes that are not matched, unless\n     *       - it's a branch node and has matched descendants\n     *       - it's a leaf node and its parent node is explicitly set to show all children\n     * @type {id[]}\n     */\n    visibleOptionIds() {\n      const visibleOptionIds = []\n\n      this.traverseAllNodesByIndex(node => {\n        if (!this.localSearch.active || this.shouldOptionBeIncludedInSearchResult(node)) {\n          visibleOptionIds.push(node.id)\n        }\n        // Skip the traversal of descendants of a branch node if it's not expanded.\n        if (node.isBranch && !this.shouldExpand(node)) {\n          return false\n        }\n      })\n\n      return visibleOptionIds\n    },\n    /**\n     * Has any option should be displayed in the menu?\n     * @type {boolean}\n     */\n    hasVisibleOptions() {\n      return this.visibleOptionIds.length !== 0\n    },\n    /**\n     * Should show children count when searching?\n     * @type {boolean}\n     */\n    showCountOnSearchComputed() {\n      // Vue doesn't allow setting default prop value based on another prop value.\n      // So use computed property as a workaround.\n      // https://github.com/vuejs/vue/issues/6358\n      return typeof this.showCountOnSearch === 'boolean'\n        ? this.showCountOnSearch\n        : this.showCount\n    },\n    /**\n     * Is there any branch node?\n     * @type {boolean}\n     */\n    hasBranchNodes() {\n      return this.forest.normalizedOptions.some(rootNode => rootNode.isBranch)\n    },\n    shouldFlattenOptions() {\n      return this.localSearch.active && this.flattenSearchResults\n    },\n    /* eslint-enable valid-jsdoc */\n  },\n\n  watch: {\n    alwaysOpen(newValue) {\n      if (newValue) this.openMenu()\n      else this.closeMenu()\n    },\n\n    branchNodesFirst() {\n      this.initialize()\n    },\n\n    disabled(newValue) {\n      // force close the menu after disabling the control\n      if (newValue && this.menu.isOpen) this.closeMenu()\n      else if (!newValue && !this.menu.isOpen && this.alwaysOpen) this.openMenu()\n    },\n\n    flat() {\n      this.initialize()\n    },\n\n    internalValue(newValue, oldValue) {\n      const hasChanged = quickDiff(newValue, oldValue)\n      // #122\n      // Vue would trigger this watcher when `newValue` and `oldValue` are shallow-equal.\n      // We emit the `input` event only when the value actually changes.\n      if (hasChanged) this.$emit('input', this.getValue(), this.getInstanceId())\n    },\n\n    matchKeys() {\n      this.initialize()\n    },\n\n    multiple(newValue) {\n      // We need to rebuild the state when switching from single-select mode\n      // to multi-select mode.\n      // istanbul ignore else\n      if (newValue) this.buildForestState()\n    },\n\n    options: {\n      handler() {\n        if (this.async) return\n        // Re-initialize options when the `options` prop has changed.\n        this.initialize()\n        this.rootOptionsStates.isLoaded = Array.isArray(this.options)\n      },\n      deep: true,\n      immediate: true,\n    },\n\n    'trigger.searchQuery'() {\n      if (this.async) {\n        this.handleRemoteSearch()\n      } else {\n        this.handleLocalSearch()\n      }\n\n      this.$emit('search-change', this.trigger.searchQuery, this.getInstanceId())\n    },\n\n    value() {\n      const nodeIdsFromValue = this.extractCheckedNodeIdsFromValue()\n      const hasChanged = quickDiff(nodeIdsFromValue, this.internalValue)\n      if (hasChanged) this.fixSelectedNodeIds(nodeIdsFromValue)\n    },\n  },\n\n  methods: {\n    verifyProps() {\n      warning(\n        () => this.async ? this.searchable : true,\n        () => 'For async search mode, the value of \"searchable\" prop must be true.',\n      )\n\n      if (this.options == null && !this.loadOptions) {\n        warning(\n          () => false,\n          () => 'Are you meant to dynamically load options? You need to use \"loadOptions\" prop.',\n        )\n      }\n\n      if (this.flat) {\n        warning(\n          () => this.multiple,\n          () => 'You are using flat mode. But you forgot to add \"multiple=true\"?',\n        )\n      }\n\n      if (!this.flat) {\n        const propNames = [\n          'autoSelectAncestors',\n          'autoSelectDescendants',\n          'autoDeselectAncestors',\n          'autoDeselectDescendants',\n        ]\n\n        propNames.forEach(propName => {\n          warning(\n            () => !this[propName],\n            () => `\"${propName}\" only applies to flat mode.`,\n          )\n        })\n      }\n    },\n\n    resetFlags() {\n      this._blurOnSelect = false\n    },\n\n    initialize() {\n      const options = this.async\n        ? this.getRemoteSearchEntry().options\n        : this.options\n\n      if (Array.isArray(options)) {\n        // In case we are re-initializing options, keep the old state tree temporarily.\n        const prevNodeMap = this.forest.nodeMap\n        this.forest.nodeMap = createMap()\n        this.keepDataOfSelectedNodes(prevNodeMap)\n        this.forest.normalizedOptions = this.normalize(NO_PARENT_NODE, options, prevNodeMap)\n        // Cases that need fixing `selectedNodeIds`:\n        //   1) Children options of a checked node have been delayed loaded,\n        //      we should also mark these children as checked. (multi-select mode)\n        //   2) Root options have been delayed loaded, we need to initialize states\n        //      of these nodes. (multi-select mode)\n        //   3) Async search mode.\n        this.fixSelectedNodeIds(this.internalValue)\n      } else {\n        this.forest.normalizedOptions = []\n      }\n    },\n\n    getInstanceId() {\n      return this.instanceId == null ? this.id : this.instanceId\n    },\n\n    getValue() {\n      if (this.valueFormat === 'id') {\n        return this.multiple\n          ? this.internalValue.slice()\n          : this.internalValue[0]\n      }\n\n      const rawNodes = this.internalValue.map(id => this.getNode(id).raw)\n      return this.multiple ? rawNodes : rawNodes[0]\n    },\n\n    getNode(nodeId) {\n      warning(\n        () => nodeId != null,\n        () => `Invalid node id: ${nodeId}`,\n      )\n\n      if (nodeId == null) return null\n\n      return nodeId in this.forest.nodeMap\n        ? this.forest.nodeMap[nodeId]\n        : this.createFallbackNode(nodeId)\n    },\n\n    createFallbackNode(id) {\n      // In case there is a default selected node that is not loaded into the tree yet,\n      // we create a fallback node to keep the component working.\n      // When the real data is loaded, we'll override this fake node.\n\n      const raw = this.extractNodeFromValue(id)\n      const label = this.enhancedNormalizer(raw).label || `${id} (unknown)`\n      const fallbackNode = {\n        id,\n        label,\n        ancestors: [],\n        parentNode: NO_PARENT_NODE,\n        isFallbackNode: true,\n        isRootNode: true,\n        isLeaf: true,\n        isBranch: false,\n        isDisabled: false,\n        isNew: false,\n        index: [ -1 ],\n        level: 0,\n        raw,\n      }\n\n      return this.$set(this.forest.nodeMap, id, fallbackNode)\n    },\n\n    extractCheckedNodeIdsFromValue() {\n      if (this.value == null) return []\n\n      if (this.valueFormat === 'id') {\n        return this.multiple\n          ? this.value.slice()\n          : [ this.value ]\n      }\n\n      return (this.multiple ? this.value : [ this.value ])\n        .map(node => this.enhancedNormalizer(node))\n        .map(node => node.id)\n    },\n\n    extractNodeFromValue(id) {\n      const defaultNode = { id }\n\n      if (this.valueFormat === 'id') {\n        return defaultNode\n      }\n\n      const valueArray = this.multiple\n        ? Array.isArray(this.value) ? this.value : []\n        : this.value ? [ this.value ] : []\n      const matched = find(\n        valueArray,\n        node => node && this.enhancedNormalizer(node).id === id,\n      )\n\n      return matched || defaultNode\n    },\n\n    fixSelectedNodeIds(nodeIdListOfPrevValue) {\n      let nextSelectedNodeIds = []\n\n      // istanbul ignore else\n      if (this.single || this.flat || this.disableBranchNodes || this.valueConsistsOf === ALL) {\n        nextSelectedNodeIds = nodeIdListOfPrevValue\n      } else if (this.valueConsistsOf === BRANCH_PRIORITY) {\n        nodeIdListOfPrevValue.forEach(nodeId => {\n          nextSelectedNodeIds.push(nodeId)\n          const node = this.getNode(nodeId)\n          if (node.isBranch) this.traverseDescendantsBFS(node, descendant => {\n            nextSelectedNodeIds.push(descendant.id)\n          })\n        })\n      } else if (this.valueConsistsOf === LEAF_PRIORITY) {\n        const map = createMap()\n        const queue = nodeIdListOfPrevValue.slice()\n        while (queue.length) {\n          const nodeId = queue.shift()\n          const node = this.getNode(nodeId)\n          nextSelectedNodeIds.push(nodeId)\n          if (node.isRootNode) continue\n          if (!(node.parentNode.id in map)) map[node.parentNode.id] = node.parentNode.children.length\n          if (--map[node.parentNode.id] === 0) queue.push(node.parentNode.id)\n        }\n      } else if (this.valueConsistsOf === ALL_WITH_INDETERMINATE) {\n        const map = createMap()\n        const queue = nodeIdListOfPrevValue.filter(nodeId => {\n          const node = this.getNode(nodeId)\n          return node.isLeaf || node.children.length === 0\n        })\n        while (queue.length) {\n          const nodeId = queue.shift()\n          const node = this.getNode(nodeId)\n          nextSelectedNodeIds.push(nodeId)\n          if (node.isRootNode) continue\n          if (!(node.parentNode.id in map)) map[node.parentNode.id] = node.parentNode.children.length\n          if (--map[node.parentNode.id] === 0) queue.push(node.parentNode.id)\n        }\n      }\n\n      const hasChanged = quickDiff(this.forest.selectedNodeIds, nextSelectedNodeIds)\n      // If `nextSelectedNodeIds` doesn't actually differ from old `selectedNodeIds`,\n      // we don't make the assignment to avoid triggering its watchers which may cause\n      // unnecessary calculations.\n      if (hasChanged) this.forest.selectedNodeIds = nextSelectedNodeIds\n\n      this.buildForestState()\n    },\n\n    keepDataOfSelectedNodes(prevNodeMap) {\n      // In case there is any selected node that is not present in the new `options` array.\n      // It could be useful for async search mode.\n      this.forest.selectedNodeIds.forEach(id => {\n        if (!prevNodeMap[id]) return\n        const node = {\n          ...prevNodeMap[id],\n          isFallbackNode: true,\n        }\n        this.$set(this.forest.nodeMap, id, node)\n      })\n    },\n\n    isSelected(node) {\n      // whether a node is selected (single-select mode) or fully-checked (multi-select mode)\n      return this.forest.selectedNodeMap[node.id] === true\n    },\n\n    traverseDescendantsBFS(parentNode, callback) {\n      // istanbul ignore if\n      if (!parentNode.isBranch) return\n      const queue = parentNode.children.slice()\n      while (queue.length) {\n        const currNode = queue[0]\n        if (currNode.isBranch) queue.push(...currNode.children)\n        callback(currNode)\n        queue.shift()\n      }\n    },\n\n    traverseDescendantsDFS(parentNode, callback) {\n      if (!parentNode.isBranch) return\n      parentNode.children.forEach(child => {\n        // deep-level node first\n        this.traverseDescendantsDFS(child, callback)\n        callback(child)\n      })\n    },\n\n    traverseAllNodesDFS(callback) {\n      this.forest.normalizedOptions.forEach(rootNode => {\n        // deep-level node first\n        this.traverseDescendantsDFS(rootNode, callback)\n        callback(rootNode)\n      })\n    },\n\n    traverseAllNodesByIndex(callback) {\n      const walk = parentNode => {\n        parentNode.children.forEach(child => {\n          if (callback(child) !== false && child.isBranch) {\n            walk(child)\n          }\n        })\n      }\n\n      // To simplify the code logic of traversal,\n      // we create a fake root node that holds all the root options.\n      walk({ children: this.forest.normalizedOptions })\n    },\n\n    toggleClickOutsideEvent(enabled) {\n      if (enabled) {\n        document.addEventListener('mousedown', this.handleClickOutside, false)\n      } else {\n        document.removeEventListener('mousedown', this.handleClickOutside, false)\n      }\n    },\n\n    getValueContainer() {\n      return this.$refs.control.$refs['value-container']\n    },\n\n    getInput() {\n      return this.getValueContainer().$refs.input\n    },\n\n    focusInput() {\n      this.getInput().focus()\n    },\n\n    blurInput() {\n      this.getInput().blur()\n    },\n\n    handleMouseDown: onLeftClick(function handleMouseDown(evt) {\n      evt.preventDefault()\n      evt.stopPropagation()\n\n      if (this.disabled) return\n\n      const isClickedOnValueContainer = this.getValueContainer().$el.contains(evt.target)\n      if (isClickedOnValueContainer && !this.menu.isOpen && (this.openOnClick || this.trigger.isFocused)) {\n        this.openMenu()\n      }\n\n      if (this._blurOnSelect) {\n        this.blurInput()\n      } else {\n        // Focus the input or prevent blurring.\n        this.focusInput()\n      }\n\n      this.resetFlags()\n    }),\n\n    handleClickOutside(evt) {\n      // istanbul ignore else\n      if (this.$refs.wrapper && !this.$refs.wrapper.contains(evt.target)) {\n        this.blurInput()\n        this.closeMenu()\n      }\n    },\n\n    handleLocalSearch() {\n      const { searchQuery } = this.trigger\n      const done = () => this.resetHighlightedOptionWhenNecessary(true)\n\n      if (!searchQuery) {\n        // Exit sync search mode.\n        this.localSearch.active = false\n        return done()\n      }\n\n      // Enter sync search mode.\n      this.localSearch.active = true\n\n      // Reset states.\n      this.localSearch.noResults = true\n      this.traverseAllNodesDFS(node => {\n        if (node.isBranch) {\n          node.isExpandedOnSearch = false\n          node.showAllChildrenOnSearch = false\n          node.isMatched = false\n          node.hasMatchedDescendants = false\n          this.$set(this.localSearch.countMap, node.id, {\n            [ALL_CHILDREN]: 0,\n            [ALL_DESCENDANTS]: 0,\n            [LEAF_CHILDREN]: 0,\n            [LEAF_DESCENDANTS]: 0,\n          })\n        }\n      })\n\n      const lowerCasedSearchQuery = searchQuery.trim().toLocaleLowerCase()\n      const splitSearchQuery = lowerCasedSearchQuery.replace(/\\s+/g, ' ').split(' ')\n      this.traverseAllNodesDFS(node => {\n        if (this.searchNested && splitSearchQuery.length > 1) {\n          node.isMatched = splitSearchQuery.every(filterValue =>\n            match(false, filterValue, node.nestedSearchLabel),\n          )\n        } else {\n          node.isMatched = this.matchKeys.some(matchKey =>\n            match(!this.disableFuzzyMatching, lowerCasedSearchQuery, node.lowerCased[matchKey]),\n          )\n        }\n\n        if (node.isMatched) {\n          this.localSearch.noResults = false\n          node.ancestors.forEach(ancestor => this.localSearch.countMap[ancestor.id][ALL_DESCENDANTS]++)\n          if (node.isLeaf) node.ancestors.forEach(ancestor => this.localSearch.countMap[ancestor.id][LEAF_DESCENDANTS]++)\n          if (node.parentNode !== NO_PARENT_NODE) {\n            this.localSearch.countMap[node.parentNode.id][ALL_CHILDREN] += 1\n            // istanbul ignore else\n            if (node.isLeaf) this.localSearch.countMap[node.parentNode.id][LEAF_CHILDREN] += 1\n          }\n        }\n\n        if (\n          (node.isMatched || (node.isBranch && node.isExpandedOnSearch)) &&\n          node.parentNode !== NO_PARENT_NODE\n        ) {\n          node.parentNode.isExpandedOnSearch = true\n          node.parentNode.hasMatchedDescendants = true\n        }\n      })\n\n      done()\n    },\n\n    handleRemoteSearch() {\n      const { searchQuery } = this.trigger\n      const entry = this.getRemoteSearchEntry()\n      const done = () => {\n        this.initialize()\n        this.resetHighlightedOptionWhenNecessary(true)\n      }\n\n      if ((searchQuery === '' || this.cacheOptions) && entry.isLoaded) {\n        return done()\n      }\n\n      this.callLoadOptionsProp({\n        action: ASYNC_SEARCH,\n        args: { searchQuery },\n        isPending() {\n          return entry.isLoading\n        },\n        start: () => {\n          entry.isLoading = true\n          entry.isLoaded = false\n          entry.loadingError = ''\n        },\n        succeed: options => {\n          entry.isLoaded = true\n          entry.options = options\n          // When the request completes, the search query may have changed.\n          // We only show these options if they are for the current search query.\n          if (this.trigger.searchQuery === searchQuery) done()\n        },\n        fail: err => {\n          entry.loadingError = getErrorMessage(err)\n        },\n        end: () => {\n          entry.isLoading = false\n        },\n      })\n    },\n\n    getRemoteSearchEntry() {\n      const { searchQuery } = this.trigger\n      const entry = this.remoteSearch[searchQuery] || {\n        ...createAsyncOptionsStates(),\n        options: [],\n      }\n\n      // Vue doesn't support directly watching on objects.\n      this.$watch(\n        () => entry.options,\n        () => {\n          // TODO: potential redundant re-initialization.\n          if (this.trigger.searchQuery === searchQuery) this.initialize()\n        },\n        { deep: true },\n      )\n\n      if (searchQuery === '') {\n        if (Array.isArray(this.defaultOptions)) {\n          entry.options = this.defaultOptions\n          entry.isLoaded = true\n          return entry\n        } else if (this.defaultOptions !== true) {\n          entry.isLoaded = true\n          return entry\n        }\n      }\n\n      if (!this.remoteSearch[searchQuery]) {\n        this.$set(this.remoteSearch, searchQuery, entry)\n      }\n\n      return entry\n    },\n\n    shouldExpand(node) {\n      return this.localSearch.active ? node.isExpandedOnSearch : node.isExpanded\n    },\n\n    shouldOptionBeIncludedInSearchResult(node) {\n      // 1) This option is matched.\n      if (node.isMatched) return true\n      // 2) This option is not matched, but has matched descendant(s).\n      if (node.isBranch && node.hasMatchedDescendants && !this.flattenSearchResults) return true\n      // 3) This option's parent has no matched descendants,\n      //    but after being expanded, all its children should be shown.\n      if (!node.isRootNode && node.parentNode.showAllChildrenOnSearch) return true\n      // 4) The default case.\n      return false\n    },\n\n    shouldShowOptionInMenu(node) {\n      if (this.localSearch.active && !this.shouldOptionBeIncludedInSearchResult(node)) {\n        return false\n      }\n      return true\n    },\n\n    getControl() {\n      return this.$refs.control.$el\n    },\n\n    getMenu() {\n      const ref = this.appendToBody ? this.$refs.portal.portalTarget : this\n      const $menu = ref.$refs.menu.$refs.menu\n      return $menu && $menu.nodeName !== '#comment' ? $menu : null\n    },\n\n    setCurrentHighlightedOption(node, scroll = true) {\n      const prev = this.menu.current\n      if (prev != null && prev in this.forest.nodeMap) {\n        this.forest.nodeMap[prev].isHighlighted = false\n      }\n\n      this.menu.current = node.id\n      node.isHighlighted = true\n\n      if (this.menu.isOpen && scroll) {\n        const scrollToOption = () => {\n          const $menu = this.getMenu()\n          const $option = $menu.querySelector(`.vue-treeselect__option[data-id=\"${node.id}\"]`)\n          if ($option) scrollIntoView($menu, $option)\n        }\n\n        // In case `openMenu()` is just called and the menu is not rendered yet.\n        if (this.getMenu()) {\n          scrollToOption()\n        } else {\n          // istanbul ignore next\n          this.$nextTick(scrollToOption)\n        }\n      }\n    },\n\n    resetHighlightedOptionWhenNecessary(forceReset = false) {\n      const { current } = this.menu\n\n      if (\n        forceReset || current == null ||\n        !(current in this.forest.nodeMap) ||\n        !this.shouldShowOptionInMenu(this.getNode(current))\n      ) {\n        this.highlightFirstOption()\n      }\n    },\n\n    highlightFirstOption() {\n      if (!this.hasVisibleOptions) return\n\n      const first = this.visibleOptionIds[0]\n      this.setCurrentHighlightedOption(this.getNode(first))\n    },\n\n    highlightPrevOption() {\n      if (!this.hasVisibleOptions) return\n\n      const prev = this.visibleOptionIds.indexOf(this.menu.current) - 1\n      if (prev === -1) return this.highlightLastOption()\n      this.setCurrentHighlightedOption(this.getNode(this.visibleOptionIds[prev]))\n    },\n\n    highlightNextOption() {\n      if (!this.hasVisibleOptions) return\n\n      const next = this.visibleOptionIds.indexOf(this.menu.current) + 1\n      if (next === this.visibleOptionIds.length) return this.highlightFirstOption()\n      this.setCurrentHighlightedOption(this.getNode(this.visibleOptionIds[next]))\n    },\n\n    highlightLastOption() {\n      if (!this.hasVisibleOptions) return\n\n      const last = getLast(this.visibleOptionIds)\n      this.setCurrentHighlightedOption(this.getNode(last))\n    },\n\n    resetSearchQuery() {\n      this.trigger.searchQuery = ''\n    },\n\n    closeMenu() {\n      if (!this.menu.isOpen || (!this.disabled && this.alwaysOpen)) return\n      this.saveMenuScrollPosition()\n      this.menu.isOpen = false\n      this.toggleClickOutsideEvent(false)\n      this.resetSearchQuery()\n      this.$emit('close', this.getValue(), this.getInstanceId())\n    },\n\n    openMenu() {\n      if (this.disabled || this.menu.isOpen) return\n      this.menu.isOpen = true\n      this.$nextTick(this.resetHighlightedOptionWhenNecessary)\n      this.$nextTick(this.restoreMenuScrollPosition)\n      if (!this.options && !this.async) this.loadRootOptions()\n      this.toggleClickOutsideEvent(true)\n      this.$emit('open', this.getInstanceId())\n    },\n\n    toggleMenu() {\n      if (this.menu.isOpen) {\n        this.closeMenu()\n      } else {\n        this.openMenu()\n      }\n    },\n\n    toggleExpanded(node) {\n      let nextState\n\n      if (this.localSearch.active) {\n        nextState = node.isExpandedOnSearch = !node.isExpandedOnSearch\n        if (nextState) node.showAllChildrenOnSearch = true\n      } else {\n        nextState = node.isExpanded = !node.isExpanded\n      }\n\n      if (nextState && !node.childrenStates.isLoaded) {\n        this.loadChildrenOptions(node)\n      }\n    },\n\n    buildForestState() {\n      const selectedNodeMap = createMap()\n      this.forest.selectedNodeIds.forEach(selectedNodeId => {\n        selectedNodeMap[selectedNodeId] = true\n      })\n      this.forest.selectedNodeMap = selectedNodeMap\n\n      const checkedStateMap = createMap()\n      if (this.multiple) {\n        this.traverseAllNodesByIndex(node => {\n          checkedStateMap[node.id] = UNCHECKED\n        })\n\n        this.selectedNodes.forEach(selectedNode => {\n          checkedStateMap[selectedNode.id] = CHECKED\n\n          if (!this.flat && !this.disableBranchNodes) {\n            selectedNode.ancestors.forEach(ancestorNode => {\n              if (!this.isSelected(ancestorNode)) {\n                checkedStateMap[ancestorNode.id] = INDETERMINATE\n              }\n            })\n          }\n        })\n      }\n      this.forest.checkedStateMap = checkedStateMap\n    },\n\n    enhancedNormalizer(raw) {\n      return {\n        ...raw,\n        ...this.normalizer(raw, this.getInstanceId()),\n      }\n    },\n\n    normalize(parentNode, nodes, prevNodeMap) {\n      let normalizedOptions = nodes\n        .map(node => [ this.enhancedNormalizer(node), node ])\n        .map(([ node, raw ], index) => {\n          this.checkDuplication(node)\n          this.verifyNodeShape(node)\n\n          const { id, label, children, isDefaultExpanded } = node\n          const isRootNode = parentNode === NO_PARENT_NODE\n          const level = isRootNode ? 0 : parentNode.level + 1\n          const isBranch = Array.isArray(children) || children === null\n          const isLeaf = !isBranch\n          const isDisabled = !!node.isDisabled || (!this.flat && !isRootNode && parentNode.isDisabled)\n          const isNew = !!node.isNew\n          const lowerCased = this.matchKeys.reduce((prev, key) => ({\n            ...prev,\n            [key]: stringifyOptionPropValue(node[key]).toLocaleLowerCase(),\n          }), {})\n          const nestedSearchLabel = isRootNode\n            ? lowerCased.label\n            : parentNode.nestedSearchLabel + ' ' + lowerCased.label\n\n          const normalized = this.$set(this.forest.nodeMap, id, createMap())\n          this.$set(normalized, 'id', id)\n          this.$set(normalized, 'label', label)\n          this.$set(normalized, 'level', level)\n          this.$set(normalized, 'ancestors', isRootNode ? [] : [ parentNode ].concat(parentNode.ancestors))\n          this.$set(normalized, 'index', (isRootNode ? [] : parentNode.index).concat(index))\n          this.$set(normalized, 'parentNode', parentNode)\n          this.$set(normalized, 'lowerCased', lowerCased)\n          this.$set(normalized, 'nestedSearchLabel', nestedSearchLabel)\n          this.$set(normalized, 'isDisabled', isDisabled)\n          this.$set(normalized, 'isNew', isNew)\n          this.$set(normalized, 'isMatched', false)\n          this.$set(normalized, 'isHighlighted', false)\n          this.$set(normalized, 'isBranch', isBranch)\n          this.$set(normalized, 'isLeaf', isLeaf)\n          this.$set(normalized, 'isRootNode', isRootNode)\n          this.$set(normalized, 'raw', raw)\n\n          if (isBranch) {\n            const isLoaded = Array.isArray(children)\n\n            this.$set(normalized, 'childrenStates', {\n              ...createAsyncOptionsStates(),\n              isLoaded,\n            })\n            this.$set(normalized, 'isExpanded', typeof isDefaultExpanded === 'boolean'\n              ? isDefaultExpanded\n              : level < this.defaultExpandLevel)\n            this.$set(normalized, 'hasMatchedDescendants', false)\n            this.$set(normalized, 'hasDisabledDescendants', false)\n            this.$set(normalized, 'isExpandedOnSearch', false)\n            this.$set(normalized, 'showAllChildrenOnSearch', false)\n            this.$set(normalized, 'count', {\n              [ALL_CHILDREN]: 0,\n              [ALL_DESCENDANTS]: 0,\n              [LEAF_CHILDREN]: 0,\n              [LEAF_DESCENDANTS]: 0,\n            })\n            this.$set(normalized, 'children', isLoaded\n              ? this.normalize(normalized, children, prevNodeMap)\n              : [])\n\n            if (isDefaultExpanded === true) normalized.ancestors.forEach(ancestor => {\n              ancestor.isExpanded = true\n            })\n\n            if (!isLoaded && typeof this.loadOptions !== 'function') {\n              warning(\n                () => false,\n                () => 'Unloaded branch node detected. \"loadOptions\" prop is required to load its children.',\n              )\n            } else if (!isLoaded && normalized.isExpanded) {\n              this.loadChildrenOptions(normalized)\n            }\n          }\n\n          normalized.ancestors.forEach(ancestor => ancestor.count[ALL_DESCENDANTS]++)\n          if (isLeaf) normalized.ancestors.forEach(ancestor => ancestor.count[LEAF_DESCENDANTS]++)\n          if (!isRootNode) {\n            parentNode.count[ALL_CHILDREN] += 1\n            if (isLeaf) parentNode.count[LEAF_CHILDREN] += 1\n            if (isDisabled) parentNode.hasDisabledDescendants = true\n          }\n\n          // Preserve previous states.\n          if (prevNodeMap && prevNodeMap[id]) {\n            const prev = prevNodeMap[id]\n\n            normalized.isMatched = prev.isMatched\n            normalized.showAllChildrenOnSearch = prev.showAllChildrenOnSearch\n            normalized.isHighlighted = prev.isHighlighted\n\n            if (prev.isBranch && normalized.isBranch) {\n              normalized.isExpanded = prev.isExpanded\n              normalized.isExpandedOnSearch = prev.isExpandedOnSearch\n              // #97\n              // If `isLoaded` was true, but IS NOT now, we consider this branch node\n              // to be reset to unloaded state by the user of this component.\n              if (prev.childrenStates.isLoaded && !normalized.childrenStates.isLoaded) {\n                // Make sure the node is collapsed, then the user can load its\n                // children again (by expanding).\n                normalized.isExpanded = false\n                // We have reset `childrenStates` and don't want to preserve states here.\n              } else {\n                normalized.childrenStates = { ...prev.childrenStates }\n              }\n            }\n          }\n\n          return normalized\n        })\n\n      if (this.branchNodesFirst) {\n        const branchNodes = normalizedOptions.filter(option => option.isBranch)\n        const leafNodes = normalizedOptions.filter(option => option.isLeaf)\n        normalizedOptions = branchNodes.concat(leafNodes)\n      }\n\n      return normalizedOptions\n    },\n\n    loadRootOptions() {\n      this.callLoadOptionsProp({\n        action: LOAD_ROOT_OPTIONS,\n        isPending: () => {\n          return this.rootOptionsStates.isLoading\n        },\n        start: () => {\n          this.rootOptionsStates.isLoading = true\n          this.rootOptionsStates.loadingError = ''\n        },\n        succeed: () => {\n          this.rootOptionsStates.isLoaded = true\n          // Wait for `options` being re-initialized.\n          this.$nextTick(() => {\n            this.resetHighlightedOptionWhenNecessary(true)\n          })\n        },\n        fail: err => {\n          this.rootOptionsStates.loadingError = getErrorMessage(err)\n        },\n        end: () => {\n          this.rootOptionsStates.isLoading = false\n        },\n      })\n    },\n\n    loadChildrenOptions(parentNode) {\n      // The options may be re-initialized anytime during the loading process.\n      // So `parentNode` can be stale and we use `getNode()` to avoid that.\n\n      const { id, raw } = parentNode\n\n      this.callLoadOptionsProp({\n        action: LOAD_CHILDREN_OPTIONS,\n        args: {\n          // We always pass the raw node instead of the normalized node to any\n          // callback provided by the user of this component.\n          // Because the shape of the raw node is more likely to be closing to\n          // what the back-end API service of the application needs.\n          parentNode: raw,\n        },\n        isPending: () => {\n          return this.getNode(id).childrenStates.isLoading\n        },\n        start: () => {\n          this.getNode(id).childrenStates.isLoading = true\n          this.getNode(id).childrenStates.loadingError = ''\n        },\n        succeed: () => {\n          this.getNode(id).childrenStates.isLoaded = true\n        },\n        fail: err => {\n          this.getNode(id).childrenStates.loadingError = getErrorMessage(err)\n        },\n        end: () => {\n          this.getNode(id).childrenStates.isLoading = false\n        },\n      })\n    },\n\n    callLoadOptionsProp({ action, args, isPending, start, succeed, fail, end }) {\n      if (!this.loadOptions || isPending()) {\n        return\n      }\n\n      start()\n\n      const callback = once((err, result) => {\n        if (err) {\n          fail(err)\n        } else {\n          succeed(result)\n        }\n\n        end()\n      })\n      const result = this.loadOptions({\n        id: this.getInstanceId(),\n        instanceId: this.getInstanceId(),\n        action,\n        ...args,\n        callback,\n      })\n\n      if (isPromise(result)) {\n        result.then(() => {\n          callback()\n        }, err => {\n          callback(err)\n        }).catch(err => {\n          // istanbul ignore next\n          console.error(err)\n        })\n      }\n    },\n\n    checkDuplication(node) {\n      warning(\n        () => !((node.id in this.forest.nodeMap) && !this.forest.nodeMap[node.id].isFallbackNode),\n        () => `Detected duplicate presence of node id ${JSON.stringify(node.id)}. ` +\n          `Their labels are \"${this.forest.nodeMap[node.id].label}\" and \"${node.label}\" respectively.`,\n      )\n    },\n\n    verifyNodeShape(node) {\n      warning(\n        () => !(node.children === undefined && node.isBranch === true),\n        () => 'Are you meant to declare an unloaded branch node? ' +\n          '`isBranch: true` is no longer supported, please use `children: null` instead.',\n      )\n    },\n\n    select(node) {\n      if (this.disabled || node.isDisabled) {\n        return\n      }\n\n      if (this.single) {\n        this.clear()\n      }\n\n      const nextState = this.multiple && !this.flat\n        ? this.forest.checkedStateMap[node.id] === UNCHECKED\n        : !this.isSelected(node)\n\n      if (nextState) {\n        this._selectNode(node)\n      } else {\n        this._deselectNode(node)\n      }\n\n      this.buildForestState()\n\n      if (nextState) {\n        this.$emit('select', node.raw, this.getInstanceId())\n      } else {\n        this.$emit('deselect', node.raw, this.getInstanceId())\n      }\n\n      if (this.localSearch.active && nextState && (this.single || this.clearOnSelect)) {\n        this.resetSearchQuery()\n      }\n\n      if (this.single && this.closeOnSelect) {\n        this.closeMenu()\n\n        // istanbul ignore else\n        if (this.searchable) {\n          this._blurOnSelect = true\n        }\n      }\n    },\n\n    clear() {\n      if (this.hasValue) {\n        if (this.single || this.allowClearingDisabled) {\n          this.forest.selectedNodeIds = []\n        } else /* if (this.multiple && !this.allowClearingDisabled) */ {\n          this.forest.selectedNodeIds = this.forest.selectedNodeIds.filter(nodeId =>\n            this.getNode(nodeId).isDisabled,\n          )\n        }\n\n        this.buildForestState()\n      }\n    },\n\n    // This is meant to be called only by `select()`.\n    _selectNode(node) {\n      if (this.single || this.disableBranchNodes) {\n        return this.addValue(node)\n      }\n\n      if (this.flat) {\n        this.addValue(node)\n\n        if (this.autoSelectAncestors) {\n          node.ancestors.forEach(ancestor => {\n            if (!this.isSelected(ancestor) && !ancestor.isDisabled) this.addValue(ancestor)\n          })\n        } else if (this.autoSelectDescendants) {\n          this.traverseDescendantsBFS(node, descendant => {\n            if (!this.isSelected(descendant) && !descendant.isDisabled) this.addValue(descendant)\n          })\n        }\n\n        return\n      }\n\n      const isFullyChecked = (\n        node.isLeaf ||\n        (/* node.isBranch && */!node.hasDisabledDescendants) ||\n        (/* node.isBranch && */this.allowSelectingDisabledDescendants)\n      )\n      if (isFullyChecked) {\n        this.addValue(node)\n      }\n\n      if (node.isBranch) {\n        this.traverseDescendantsBFS(node, descendant => {\n          if (!descendant.isDisabled || this.allowSelectingDisabledDescendants) {\n            this.addValue(descendant)\n          }\n        })\n      }\n\n      if (isFullyChecked) {\n        let curr = node\n        while ((curr = curr.parentNode) !== NO_PARENT_NODE) {\n          if (curr.children.every(this.isSelected)) this.addValue(curr)\n          else break\n        }\n      }\n    },\n\n    // This is meant to be called only by `select()`.\n    _deselectNode(node) {\n      if (this.disableBranchNodes) {\n        return this.removeValue(node)\n      }\n\n      if (this.flat) {\n        this.removeValue(node)\n\n        if (this.autoDeselectAncestors) {\n          node.ancestors.forEach(ancestor => {\n            if (this.isSelected(ancestor) && !ancestor.isDisabled) this.removeValue(ancestor)\n          })\n        } else if (this.autoDeselectDescendants) {\n          this.traverseDescendantsBFS(node, descendant => {\n            if (this.isSelected(descendant) && !descendant.isDisabled) this.removeValue(descendant)\n          })\n        }\n\n        return\n      }\n\n      let hasUncheckedSomeDescendants = false\n      if (node.isBranch) {\n        this.traverseDescendantsDFS(node, descendant => {\n          if (!descendant.isDisabled || this.allowSelectingDisabledDescendants) {\n            this.removeValue(descendant)\n            hasUncheckedSomeDescendants = true\n          }\n        })\n      }\n\n      if (\n        node.isLeaf ||\n        /* node.isBranch && */hasUncheckedSomeDescendants ||\n        /* node.isBranch && */node.children.length === 0\n      ) {\n        this.removeValue(node)\n\n        let curr = node\n        while ((curr = curr.parentNode) !== NO_PARENT_NODE) {\n          if (this.isSelected(curr)) this.removeValue(curr)\n          else break\n        }\n      }\n    },\n\n    addValue(node) {\n      this.forest.selectedNodeIds.push(node.id)\n      this.forest.selectedNodeMap[node.id] = true\n    },\n\n    removeValue(node) {\n      removeFromArray(this.forest.selectedNodeIds, node.id)\n      delete this.forest.selectedNodeMap[node.id]\n    },\n\n    removeLastValue() {\n      if (!this.hasValue) return\n      if (this.single) return this.clear()\n      const lastValue = getLast(this.internalValue)\n      const lastSelectedNode = this.getNode(lastValue)\n      this.select(lastSelectedNode) // deselect\n    },\n\n    saveMenuScrollPosition() {\n      const $menu = this.getMenu()\n      // istanbul ignore else\n      if ($menu) this.menu.lastScrollPosition = $menu.scrollTop\n    },\n\n    restoreMenuScrollPosition() {\n      const $menu = this.getMenu()\n      // istanbul ignore else\n      if ($menu) $menu.scrollTop = this.menu.lastScrollPosition\n    },\n  },\n\n  created() {\n    this.verifyProps()\n    this.resetFlags()\n  },\n\n  mounted() {\n    if (this.autoFocus) this.focusInput()\n    if (!this.options && !this.async && this.autoLoadRootOptions) this.loadRootOptions()\n    if (this.alwaysOpen) this.openMenu()\n    if (this.async && this.defaultOptions) this.handleRemoteSearch()\n  },\n\n  destroyed() {\n    // istanbul ignore next\n    this.toggleClickOutsideEvent(false)\n  },\n}\n","<script>\n  import { isNaN } from '../utils'\n\n  function stringifyValue(value) {\n    if (typeof value === 'string') return value\n    // istanbul ignore else\n    if (value != null && !isNaN(value)) return JSON.stringify(value)\n    // istanbul ignore next\n    return ''\n  }\n\n  export default {\n    name: 'vue-treeselect--hidden-fields',\n    inject: [ 'instance' ],\n    functional: true,\n\n    render(_, context) {\n      const { instance } = context.injections\n\n      if (!instance.name || instance.disabled || !instance.hasValue) return null\n\n      let stringifiedValues = instance.internalValue.map(stringifyValue)\n\n      if (instance.multiple && instance.joinValues) stringifiedValues = [\n        stringifiedValues.join(instance.delimiter),\n      ]\n\n      return stringifiedValues.map((stringifiedValue, i) => (\n        <input type=\"hidden\"\n          name={instance.name}\n          value={stringifiedValue}\n          key={'hidden-field-' + i}\n        />\n      ))\n    },\n  }\n</script>\n","/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nexport default function normalizeComponent(\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier /* server only */,\n  shadowMode /* vue-cli only */\n) {\n  // Vue.extend constructor export interop\n  var options =\n    typeof scriptExports === 'function' ? scriptExports.options : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = 'data-v-' + scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) {\n    // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () {\n          injectStyles.call(\n            this,\n            (options.functional ? this.parent : this).$root.$options.shadowRoot\n          )\n        }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functional component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n","var render, staticRenderFns\nimport script from \"./HiddenFields.vue?vue&type=script&lang=js&\"\nexport * from \"./HiddenFields.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  import { debounce, deepExtend, includes } from '../utils'\n  import { MIN_INPUT_WIDTH, KEY_CODES, INPUT_DEBOUNCE_DELAY } from '../constants'\n\n  const keysThatRequireMenuBeingOpen = [\n    KEY_CODES.ENTER,\n    KEY_CODES.END,\n    KEY_CODES.HOME,\n    KEY_CODES.ARROW_LEFT,\n    KEY_CODES.ARROW_UP,\n    KEY_CODES.ARROW_RIGHT,\n    KEY_CODES.ARROW_DOWN,\n  ]\n\n  export default {\n    name: 'vue-treeselect--input',\n    inject: [ 'instance' ],\n\n    data: () => ({\n      inputWidth: MIN_INPUT_WIDTH,\n      value: '',\n    }),\n\n    computed: {\n      needAutoSize() {\n        const { instance } = this\n\n        return (\n          instance.searchable &&\n          !instance.disabled &&\n          instance.multiple\n        )\n      },\n\n      inputStyle() {\n        return {\n          width: this.needAutoSize ? `${this.inputWidth}px` : null,\n        }\n      },\n    },\n\n    watch: {\n      'instance.trigger.searchQuery'(newValue) {\n        this.value = newValue\n      },\n\n      value() {\n        // istanbul ignore else\n        if (this.needAutoSize) this.$nextTick(this.updateInputWidth)\n      },\n    },\n\n    created() {\n      this.debouncedCallback = debounce(\n        this.updateSearchQuery,\n        INPUT_DEBOUNCE_DELAY,\n        { leading: true, trailing: true },\n      )\n    },\n\n    methods: {\n      clear() {\n        this.onInput({\n          target: { value: '' },\n        })\n      },\n\n      focus() {\n        const { instance } = this\n\n        if (!instance.disabled) {\n          this.$refs.input && this.$refs.input.focus()\n        }\n      },\n\n      blur() {\n        this.$refs.input && this.$refs.input.blur()\n      },\n\n      onFocus() {\n        const { instance } = this\n\n        instance.trigger.isFocused = true\n        // istanbul ignore else\n        if (instance.openOnFocus) instance.openMenu()\n      },\n\n      onBlur() {\n        const { instance } = this\n        const menu = instance.getMenu()\n\n        // #15\n        // istanbul ignore next\n        if (menu && document.activeElement === menu) {\n          return this.focus()\n        }\n\n        instance.trigger.isFocused = false\n        instance.closeMenu()\n      },\n\n      onInput(evt) {\n        const { value } = evt.target\n\n        this.value = value\n\n        if (value) {\n          this.debouncedCallback()\n        } else {\n          this.debouncedCallback.cancel()\n          this.updateSearchQuery()\n        }\n      },\n\n      // 用 keyUp 事件存在一个问题，删除输入框最后一个字符也会导致取消选中最后一项\n      onKeyDown(evt) {\n        const { instance } = this\n        // https://css-tricks.com/snippets/javascript/javascript-keycodes/\n        // https://stackoverflow.com/questions/4471582/javascript-keycode-vs-which\n        const key = 'which' in evt ? evt.which : /* istanbul ignore next */ evt.keyCode\n\n        if (evt.ctrlKey || evt.shiftKey || evt.altKey || evt.metaKey)\n          return\n\n        if (!instance.menu.isOpen && includes(keysThatRequireMenuBeingOpen, key)) {\n          evt.preventDefault()\n          return instance.openMenu()\n        }\n\n        switch (key) {\n        case KEY_CODES.BACKSPACE: {\n          if (instance.backspaceRemoves && !this.value.length) {\n            instance.removeLastValue()\n          }\n          break\n        }\n        case KEY_CODES.ENTER: {\n          evt.preventDefault()\n          if (instance.menu.current === null) return\n          const current = instance.getNode(instance.menu.current)\n          if (current.isBranch && instance.disableBranchNodes) return\n          instance.select(current)\n          break\n        }\n        case KEY_CODES.ESCAPE: {\n          if (this.value.length) {\n            this.clear()\n          } else if (instance.menu.isOpen) {\n            instance.closeMenu()\n          }\n          break\n        }\n        case KEY_CODES.END: {\n          evt.preventDefault()\n          instance.highlightLastOption()\n          break\n        }\n        case KEY_CODES.HOME: {\n          evt.preventDefault()\n          instance.highlightFirstOption()\n          break\n        }\n        case KEY_CODES.ARROW_LEFT: {\n          const current = instance.getNode(instance.menu.current)\n          if (current.isBranch && instance.shouldExpand(current)) {\n            evt.preventDefault()\n            instance.toggleExpanded(current)\n          } else if (!current.isRootNode && (current.isLeaf || (current.isBranch && !(instance.shouldExpand(current))))) {\n            evt.preventDefault()\n            instance.setCurrentHighlightedOption(current.parentNode)\n          }\n          break\n        }\n        case KEY_CODES.ARROW_UP: {\n          evt.preventDefault()\n          instance.highlightPrevOption()\n          break\n        }\n        case KEY_CODES.ARROW_RIGHT: {\n          const current = instance.getNode(instance.menu.current)\n          if (current.isBranch && !instance.shouldExpand(current)) {\n            evt.preventDefault()\n            instance.toggleExpanded(current)\n          }\n          break\n        }\n        case KEY_CODES.ARROW_DOWN: {\n          evt.preventDefault()\n          instance.highlightNextOption()\n          break\n        }\n        case KEY_CODES.DELETE: {\n          if (instance.deleteRemoves && !this.value.length) {\n            instance.removeLastValue()\n          }\n          break\n        }\n        default: {\n          // istanbul ignore else\n          instance.openMenu()\n        }\n        }\n      },\n\n      onMouseDown(evt) {\n        // istanbul ignore next\n        if (this.value.length) {\n          // Prevent it from bubbling to the top level and triggering `preventDefault()`\n          // to make the textbox unselectable\n          evt.stopPropagation()\n        }\n      },\n\n      renderInputContainer() {\n        const { instance } = this\n        const props = {}\n        const children = []\n\n        if (instance.searchable && !instance.disabled) {\n          children.push(this.renderInput())\n          if (this.needAutoSize) children.push(this.renderSizer())\n        }\n\n        if (!instance.searchable) {\n          deepExtend(props, {\n            on: {\n              focus: this.onFocus,\n              blur: this.onBlur,\n              keydown: this.onKeyDown,\n            },\n            ref: 'input',\n          })\n        }\n\n        if (!instance.searchable && !instance.disabled) {\n          deepExtend(props, {\n            attrs: {\n              tabIndex: instance.tabIndex,\n            },\n          })\n        }\n\n        return (\n          <div class=\"vue-treeselect__input-container\" {...props}>\n            {children}\n          </div>\n        )\n      },\n\n      renderInput() {\n        const { instance } = this\n\n        return (\n          <input ref=\"input\"\n            class=\"vue-treeselect__input\"\n            type=\"text\"\n            autocomplete=\"off\"\n            tabIndex={instance.tabIndex}\n            required={instance.required && !instance.hasValue}\n            value={this.value}\n            style={this.inputStyle}\n            onFocus={this.onFocus}\n            onInput={this.onInput}\n            onBlur={this.onBlur}\n            onKeydown={this.onKeyDown}\n            onMousedown={this.onMouseDown}\n          />\n        )\n      },\n\n      renderSizer() {\n        return (\n          <div ref=\"sizer\" class=\"vue-treeselect__sizer\">{this.value}</div>\n        )\n      },\n\n      updateInputWidth() {\n        this.inputWidth = Math.max(\n          MIN_INPUT_WIDTH,\n          this.$refs.sizer.scrollWidth + 15,\n        )\n      },\n\n      updateSearchQuery() {\n        const { instance } = this\n\n        instance.trigger.searchQuery = this.value\n      },\n    },\n\n    render() {\n      return this.renderInputContainer()\n    },\n  }\n</script>\n","var render, staticRenderFns\nimport script from \"./Input.vue?vue&type=script&lang=js&\"\nexport * from \"./Input.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render, staticRenderFns\nimport script from \"./Placeholder.vue?vue&type=script&lang=js&\"\nexport * from \"./Placeholder.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  export default {\n    name: 'vue-treeselect--placeholder',\n    inject: [ 'instance' ],\n\n    render() {\n      const { instance } = this\n      const placeholderClass = {\n        'vue-treeselect__placeholder': true,\n        'vue-treeselect-helper-zoom-effect-off': true,\n        'vue-treeselect-helper-hide': instance.hasValue || instance.trigger.searchQuery,\n      }\n\n      return (\n        <div class={placeholderClass}>\n          { instance.placeholder }\n        </div>\n      )\n    },\n  }\n</script>\n","var render, staticRenderFns\nimport script from \"./SingleValue.vue?vue&type=script&lang=js&\"\nexport * from \"./SingleValue.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  import Input from './Input'\n  import Placeholder from './Placeholder'\n\n  export default {\n    name: 'vue-treeselect--single-value',\n    inject: [ 'instance' ],\n    methods: {\n      renderSingleValueLabel() {\n        const { instance } = this\n        const node = instance.selectedNodes[0]\n\n        const customValueLabelRenderer = instance.$scopedSlots['value-label']\n        return customValueLabelRenderer\n          ? customValueLabelRenderer({ node })\n          : node.label\n      },\n    },\n    render() {\n      const { instance, $parent: { renderValueContainer } } = this\n      const shouldShowValue = instance.hasValue && !instance.trigger.searchQuery\n\n      return renderValueContainer([\n        shouldShowValue && (\n          <div class=\"vue-treeselect__single-value\">\n            { this.renderSingleValueLabel() }\n          </div>\n        ),\n        <Placeholder />,\n        <Input ref=\"input\" />,\n      ])\n    },\n  }\n</script>\n","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"svg\",\n    {\n      attrs: {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 348.333 348.333\",\n      },\n    },\n    [\n      _c(\"path\", {\n        attrs: {\n          d: \"M336.559 68.611L231.016 174.165l105.543 105.549c15.699 15.705 15.699 41.145 0 56.85-7.844 7.844-18.128 11.769-28.407 11.769-10.296 0-20.581-3.919-28.419-11.769L174.167 231.003 68.609 336.563c-7.843 7.844-18.128 11.769-28.416 11.769-10.285 0-20.563-3.919-28.413-11.769-15.699-15.698-15.699-41.139 0-56.85l105.54-105.549L11.774 68.611c-15.699-15.699-15.699-41.145 0-56.844 15.696-15.687 41.127-15.687 56.829 0l105.563 105.554L279.721 11.767c15.705-15.687 41.139-15.687 56.832 0 15.705 15.699 15.705 41.145.006 56.844z\",\n        },\n      }),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 348.333 348.333\">\n    <path d=\"M336.559 68.611L231.016 174.165l105.543 105.549c15.699 15.705 15.699 41.145 0 56.85-7.844 7.844-18.128 11.769-28.407 11.769-10.296 0-20.581-3.919-28.419-11.769L174.167 231.003 68.609 336.563c-7.843 7.844-18.128 11.769-28.416 11.769-10.285 0-20.563-3.919-28.413-11.769-15.699-15.698-15.699-41.139 0-56.85l105.54-105.549L11.774 68.611c-15.699-15.699-15.699-41.145 0-56.844 15.696-15.687 41.127-15.687 56.829 0l105.563 105.554L279.721 11.767c15.705-15.687 41.139-15.687 56.832 0 15.705 15.699 15.705 41.145.006 56.844z\" />\n  </svg>\n</template>\n\n<script>\n  export default {\n    name: 'vue-treeselect--x',\n  }\n</script>\n","import { render, staticRenderFns } from \"./Delete.vue?vue&type=template&id=12b4a02e&\"\nimport script from \"./Delete.vue?vue&type=script&lang=js&\"\nexport * from \"./Delete.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render, staticRenderFns\nimport script from \"./MultiValueItem.vue?vue&type=script&lang=js&\"\nexport * from \"./MultiValueItem.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  import { onLeftClick } from '../utils'\n  import DeleteIcon from './icons/Delete'\n\n  export default {\n    name: 'vue-treeselect--multi-value-item',\n    inject: [ 'instance' ],\n\n    props: {\n      node: {\n        type: Object,\n        required: true,\n      },\n    },\n\n    methods: {\n      handleMouseDown: onLeftClick(function handleMouseDown() {\n        const { instance, node } = this\n\n        // Deselect this node.\n        instance.select(node)\n      }),\n    },\n\n    render() {\n      const { instance, node } = this\n      const itemClass = {\n        'vue-treeselect__multi-value-item': true,\n        'vue-treeselect__multi-value-item-disabled': node.isDisabled,\n        'vue-treeselect__multi-value-item-new': node.isNew,\n      }\n      const customValueLabelRenderer = instance.$scopedSlots['value-label']\n      const labelRenderer = customValueLabelRenderer ? customValueLabelRenderer({ node }) : node.label\n\n      return (\n        <div class=\"vue-treeselect__multi-value-item-container\">\n          <div class={itemClass} onMousedown={this.handleMouseDown}>\n            <span class=\"vue-treeselect__multi-value-label\">{ labelRenderer }</span>\n            <span class=\"vue-treeselect__icon vue-treeselect__value-remove\"><DeleteIcon /></span>\n          </div>\n        </div>\n      )\n    },\n  }\n</script>\n","var render, staticRenderFns\nimport script from \"./MultiValue.vue?vue&type=script&lang=js&\"\nexport * from \"./MultiValue.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  import MultiValueItem from './MultiValueItem'\n  import Input from './Input'\n  import Placeholder from './Placeholder'\n\n  export default {\n    name: 'vue-treeselect--multi-value',\n    inject: [ 'instance' ],\n\n    methods: {\n      renderMultiValueItems() {\n        const { instance } = this\n\n        return instance.internalValue\n          .slice(0, instance.limit)\n          .map(instance.getNode)\n          .map(node => (\n            <MultiValueItem key={`multi-value-item-${node.id}`} node={node} />\n          ))\n      },\n\n      renderExceedLimitTip() {\n        const { instance } = this\n        const count = instance.internalValue.length - instance.limit\n\n        if (count <= 0) return null\n\n        return (\n          <div class=\"vue-treeselect__limit-tip vue-treeselect-helper-zoom-effect-off\" key=\"exceed-limit-tip\">\n            <span class=\"vue-treeselect__limit-tip-text\">{ instance.limitText(count) }</span>\n          </div>\n        )\n      },\n    },\n\n    render() {\n      const { renderValueContainer } = this.$parent\n      const transitionGroupProps = {\n        props: {\n          tag: 'div',\n          name: 'vue-treeselect__multi-value-item--transition',\n          appear: true,\n        },\n      }\n\n      return renderValueContainer(\n        <transition-group class=\"vue-treeselect__multi-value\" {...transitionGroupProps}>\n          {this.renderMultiValueItems()}\n          {this.renderExceedLimitTip()}\n          <Placeholder key=\"placeholder\" />\n          <Input ref=\"input\" key=\"input\" />\n        </transition-group>,\n      )\n    },\n  }\n</script>\n","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"svg\",\n    {\n      attrs: {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 292.362 292.362\",\n      },\n    },\n    [\n      _c(\"path\", {\n        attrs: {\n          d: \"M286.935 69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952 0-9.233 1.807-12.85 5.424C1.807 72.998 0 77.279 0 82.228c0 4.948 1.807 9.229 5.424 12.847l127.907 127.907c3.621 3.617 7.902 5.428 12.85 5.428s9.233-1.811 12.847-5.428L286.935 95.074c3.613-3.617 5.427-7.898 5.427-12.847 0-4.948-1.814-9.229-5.427-12.85z\",\n        },\n      }),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","<template>\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 292.362 292.362\">\n    <path d=\"M286.935 69.377c-3.614-3.617-7.898-5.424-12.848-5.424H18.274c-4.952 0-9.233 1.807-12.85 5.424C1.807 72.998 0 77.279 0 82.228c0 4.948 1.807 9.229 5.424 12.847l127.907 127.907c3.621 3.617 7.902 5.428 12.85 5.428s9.233-1.811 12.847-5.428L286.935 95.074c3.613-3.617 5.427-7.898 5.427-12.847 0-4.948-1.814-9.229-5.427-12.85z\" />\n  </svg>\n</template>\n\n<script>\n  export default {\n    name: 'vue-treeselect--arrow',\n  }\n</script>\n","<script>\n  import { UNCHECKED, INDETERMINATE, CHECKED } from '../constants'\n  import { onLeftClick } from '../utils'\n  import Tip from './Tip'\n  import ArrowIcon from './icons/Arrow'\n\n  let arrowPlaceholder, checkMark, minusMark\n\n  const Option = {\n    name: 'vue-treeselect--option',\n    inject: [ 'instance' ],\n\n    props: {\n      node: {\n        type: Object,\n        required: true,\n      },\n    },\n\n    computed: {\n      shouldExpand() {\n        const { instance, node } = this\n\n        return node.isBranch && instance.shouldExpand(node)\n      },\n\n      shouldShow() {\n        const { instance, node } = this\n\n        return instance.shouldShowOptionInMenu(node)\n      },\n    },\n\n    methods: {\n      renderOption() {\n        const { instance, node } = this\n        const optionClass = {\n          'vue-treeselect__option': true,\n          'vue-treeselect__option--disabled': node.isDisabled,\n          'vue-treeselect__option--selected': instance.isSelected(node),\n          'vue-treeselect__option--highlight': node.isHighlighted,\n          'vue-treeselect__option--matched': instance.localSearch.active && node.isMatched,\n          'vue-treeselect__option--hide': !this.shouldShow,\n        }\n\n        return (\n          <div class={optionClass} onMouseenter={this.handleMouseEnterOption} data-id={node.id}>\n            {this.renderArrow()}\n            {this.renderLabelContainer([\n              this.renderCheckboxContainer([\n                this.renderCheckbox(),\n              ]),\n              this.renderLabel(),\n            ])}\n          </div>\n        )\n      },\n\n      renderSubOptionsList() {\n        if (!this.shouldExpand) return null\n\n        return (\n          <div class=\"vue-treeselect__list\">\n            {this.renderSubOptions()}\n            {this.renderNoChildrenTip()}\n            {this.renderLoadingChildrenTip()}\n            {this.renderLoadingChildrenErrorTip()}\n          </div>\n        )\n      },\n\n      renderArrow() {\n        const { instance, node } = this\n\n        if (instance.shouldFlattenOptions && this.shouldShow) return null\n\n        if (node.isBranch) {\n          const transitionProps = {\n            props: {\n              name: 'vue-treeselect__option-arrow--prepare',\n              appear: true,\n            },\n          }\n          const arrowClass = {\n            'vue-treeselect__option-arrow': true,\n            'vue-treeselect__option-arrow--rotated': this.shouldExpand,\n          }\n\n          return (\n            <div class=\"vue-treeselect__option-arrow-container\" onMousedown={this.handleMouseDownOnArrow}>\n              <transition {...transitionProps}>\n                <ArrowIcon class={arrowClass} />\n              </transition>\n            </div>\n          )\n        }\n\n        // For leaf nodes, we render a placeholder to keep its label aligned to\n        // branch nodes. Unless there is no branch nodes at all (a normal\n        // non-tree select).\n        if (/*node.isLeaf && */instance.hasBranchNodes) {\n          if (!arrowPlaceholder) arrowPlaceholder = (\n            <div class=\"vue-treeselect__option-arrow-placeholder\">&nbsp;</div>\n          )\n\n          return arrowPlaceholder\n        }\n\n        return null\n      },\n\n      renderLabelContainer(children) {\n        return (\n          <div class=\"vue-treeselect__label-container\" onMousedown={this.handleMouseDownOnLabelContainer}>\n            {children}\n          </div>\n        )\n      },\n\n      renderCheckboxContainer(children) {\n        const { instance, node } = this\n\n        if (instance.single) return null\n        if (instance.disableBranchNodes && node.isBranch) return null\n\n        return (\n          <div class=\"vue-treeselect__checkbox-container\">\n            {children}\n          </div>\n        )\n      },\n\n      renderCheckbox() {\n        const { instance, node } = this\n        const checkedState = instance.forest.checkedStateMap[node.id]\n        const checkboxClass = {\n          'vue-treeselect__checkbox': true,\n          'vue-treeselect__checkbox--checked': checkedState === CHECKED,\n          'vue-treeselect__checkbox--indeterminate': checkedState === INDETERMINATE,\n          'vue-treeselect__checkbox--unchecked': checkedState === UNCHECKED,\n          'vue-treeselect__checkbox--disabled': node.isDisabled,\n        }\n\n        if (!checkMark) checkMark = (\n          <span class=\"vue-treeselect__check-mark\" />\n        )\n        if (!minusMark) minusMark = (\n          <span class=\"vue-treeselect__minus-mark\" />\n        )\n\n        return (\n          <span class={checkboxClass}>\n            {checkMark}\n            {minusMark}\n          </span>\n        )\n      },\n\n      renderLabel() {\n        const { instance, node } = this\n        const shouldShowCount = (\n          node.isBranch && (instance.localSearch.active\n            ? instance.showCountOnSearchComputed\n            : instance.showCount\n          )\n        )\n        const count = shouldShowCount\n          ? instance.localSearch.active\n            ? instance.localSearch.countMap[node.id][instance.showCountOf]\n            : node.count[instance.showCountOf]\n          : NaN\n        const labelClassName = 'vue-treeselect__label'\n        const countClassName = 'vue-treeselect__count'\n        const customLabelRenderer = instance.$scopedSlots['option-label']\n\n        if (customLabelRenderer) return customLabelRenderer({\n          node,\n          shouldShowCount,\n          count,\n          labelClassName,\n          countClassName,\n        })\n\n        return (\n          <label class={labelClassName}>\n            {node.label}\n            {shouldShowCount && (\n              <span class={countClassName}>({count})</span>\n            )}\n          </label>\n        )\n      },\n\n      renderSubOptions() {\n        const { node } = this\n\n        if (!node.childrenStates.isLoaded) return null\n\n        return node.children.map(childNode => (\n          <Option node={childNode} key={childNode.id} />\n        ))\n      },\n\n      renderNoChildrenTip() {\n        const { instance, node } = this\n\n        if (!node.childrenStates.isLoaded || node.children.length) return null\n\n        return (\n          <Tip type=\"no-children\" icon=\"warning\">{ instance.noChildrenText }</Tip>\n        )\n      },\n\n      renderLoadingChildrenTip() {\n        const { instance, node } = this\n\n        if (!node.childrenStates.isLoading) return null\n\n        return (\n          <Tip type=\"loading\" icon=\"loader\">{ instance.loadingText }</Tip>\n        )\n      },\n\n      renderLoadingChildrenErrorTip() {\n        const { instance, node } = this\n\n        if (!node.childrenStates.loadingError) return null\n\n        return (\n          <Tip type=\"error\" icon=\"error\">\n            { node.childrenStates.loadingError }\n            <a class=\"vue-treeselect__retry\" title={instance.retryTitle} onMousedown={this.handleMouseDownOnRetry}>\n              { instance.retryText }\n            </a>\n          </Tip>\n        )\n      },\n\n      handleMouseEnterOption(evt) {\n        const { instance, node } = this\n\n        // Equivalent to `self` modifier.\n        // istanbul ignore next\n        if (evt.target !== evt.currentTarget) return\n\n        instance.setCurrentHighlightedOption(node, false)\n      },\n\n      handleMouseDownOnArrow: onLeftClick(function handleMouseDownOnOptionArrow() {\n        const { instance, node } = this\n\n        instance.toggleExpanded(node)\n      }),\n\n      handleMouseDownOnLabelContainer: onLeftClick(function handleMouseDownOnLabelContainer() {\n        const { instance, node } = this\n\n        if (node.isBranch && instance.disableBranchNodes) {\n          instance.toggleExpanded(node)\n        } else {\n          instance.select(node)\n        }\n      }),\n\n      handleMouseDownOnRetry: onLeftClick(function handleMouseDownOnRetry() {\n        const { instance, node } = this\n\n        instance.loadChildrenOptions(node)\n      }),\n    },\n\n    render() {\n      const { node } = this\n      const indentLevel = this.instance.shouldFlattenOptions ? 0 : node.level\n      const listItemClass = {\n        'vue-treeselect__list-item': true,\n        [`vue-treeselect__indent-level-${indentLevel}`]: true,\n      }\n      const transitionProps = {\n        props: {\n          name: 'vue-treeselect__list--transition',\n        },\n      }\n\n      return (\n        <div class={listItemClass}>\n          {this.renderOption()}\n          {node.isBranch && (\n            <transition {...transitionProps}>\n              {this.renderSubOptionsList()}\n            </transition>\n          )}\n        </div>\n      )\n    },\n  }\n\n  // eslint-disable-next-line vue/require-direct-export\n  export default Option\n</script>\n","import { render, staticRenderFns } from \"./Arrow.vue?vue&type=template&id=5d5151cb&\"\nimport script from \"./Arrow.vue?vue&type=script&lang=js&\"\nexport * from \"./Arrow.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render, staticRenderFns\nimport script from \"./Control.vue?vue&type=script&lang=js&\"\nexport * from \"./Control.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  import { onLeftClick, isPromise } from '../utils'\n  import SingleValue from './SingleValue'\n  import MultiValue from './MultiValue'\n  import DeleteIcon from './icons/Delete'\n  import ArrowIcon from './icons/Arrow'\n\n  export default {\n    name: 'vue-treeselect--control',\n    inject: [ 'instance' ],\n\n    computed: {\n      /* eslint-disable valid-jsdoc */\n      /**\n       * Should show the \"×\" button that resets value?\n       * @return {boolean}\n       */\n      shouldShowX() {\n        const { instance } = this\n\n        return (\n          instance.clearable &&\n          !instance.disabled &&\n          instance.hasValue &&\n          (this.hasUndisabledValue || instance.allowClearingDisabled)\n        )\n      },\n\n      /**\n       * Should show the arrow button that toggles menu?\n       * @return {boolean}\n       */\n      shouldShowArrow() {\n        const { instance } = this\n\n        if (!instance.alwaysOpen) return true\n        // Even with `alwaysOpen: true`, sometimes the menu is still closed,\n        // e.g. when the control is disabled.\n        return !instance.menu.isOpen\n      },\n\n      /**\n       * Has any undisabled option been selected?\n       * @type {boolean}\n       */\n      hasUndisabledValue() {\n        const { instance } = this\n\n        return (\n          instance.hasValue &&\n          instance.internalValue.some(id => !instance.getNode(id).isDisabled)\n        )\n      },\n      /* eslint-enable valid-jsdoc */\n    },\n\n    methods: {\n      renderX() {\n        const { instance } = this\n        const title = instance.multiple ? instance.clearAllText : instance.clearValueText\n\n        if (!this.shouldShowX) return null\n\n        return (\n          <div class=\"vue-treeselect__x-container\" title={title} onMousedown={this.handleMouseDownOnX}>\n            <DeleteIcon class=\"vue-treeselect__x\" />\n          </div>\n        )\n      },\n\n      renderArrow() {\n        const { instance } = this\n        const arrowClass = {\n          'vue-treeselect__control-arrow': true,\n          'vue-treeselect__control-arrow--rotated': instance.menu.isOpen,\n        }\n\n        if (!this.shouldShowArrow) return null\n\n        return (\n          <div class=\"vue-treeselect__control-arrow-container\" onMousedown={this.handleMouseDownOnArrow}>\n            <ArrowIcon class={arrowClass} />\n          </div>\n        )\n      },\n\n      handleMouseDownOnX: onLeftClick(function handleMouseDownOnX(evt) {\n        /**\n         * We don't use async/await here because we don't want\n         * to rely on Babel polyfill or regenerator runtime.\n         * See: https://babeljs.io/docs/plugins/transform-regenerator/\n         * We also don't want to assume there is a global `Promise`\n         * class, since we are targeting to support IE9 without the\n         * need of any polyfill.\n         */\n\n        evt.stopPropagation()\n        evt.preventDefault()\n\n        const { instance } = this\n        const result = instance.beforeClearAll()\n        const handler = shouldClear => {\n          if (shouldClear) instance.clear()\n        }\n\n        if (isPromise(result)) {\n          // The handler will be called async.\n          result.then(handler)\n        } else {\n          // Keep the same behavior here.\n          setTimeout(() => handler(result), 0)\n          // Also, note that IE9 requires:\n          //   setTimeout(() => fn(...args), delay)\n          // Instead of:\n          //   setTimeout(fn, delay, ...args)\n        }\n      }),\n\n      handleMouseDownOnArrow: onLeftClick(function handleMouseDownOnArrow(evt) {\n        evt.preventDefault()\n        evt.stopPropagation()\n\n        const { instance } = this\n\n        // Focus the input or prevent blurring.\n        instance.focusInput()\n        instance.toggleMenu()\n      }),\n\n      // This is meant to be called by child `<Value />` component.\n      renderValueContainer(children) {\n        return (\n          <div class=\"vue-treeselect__value-container\">\n            {children}\n          </div>\n        )\n      },\n    },\n\n    render() {\n      const { instance } = this\n      const ValueContainer = instance.single ? SingleValue : MultiValue\n\n      return (\n        <div class=\"vue-treeselect__control\" onMousedown={instance.handleMouseDown}>\n          <ValueContainer ref=\"value-container\" />\n          {this.renderX()}\n          {this.renderArrow()}\n        </div>\n      )\n    },\n  }\n</script>\n","var render, staticRenderFns\nimport script from \"./Tip.vue?vue&type=script&lang=js&\"\nexport * from \"./Tip.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  export default {\n    name: 'vue-treeselect--tip',\n    functional: true,\n\n    props: {\n      type: {\n        type: String,\n        required: true,\n      },\n      icon: {\n        type: String,\n        required: true,\n      },\n    },\n\n    render(_, context) {\n      const { props, children } = context\n\n      return (\n        <div class={`vue-treeselect__tip vue-treeselect__${props.type}-tip`}>\n          <div class=\"vue-treeselect__icon-container\">\n            <span class={`vue-treeselect__icon-${props.icon}`} />\n          </div>\n          <span class={`vue-treeselect__tip-text vue-treeselect__${props.type}-tip-text`}>\n            {children}\n          </span>\n        </div>\n      )\n    },\n  }\n</script>\n","var render, staticRenderFns\nimport script from \"./Option.vue?vue&type=script&lang=js&\"\nexport * from \"./Option.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  import { MENU_BUFFER } from '../constants'\n  import { watchSize, setupResizeAndScrollEventListeners } from '../utils'\n  import Option from './Option'\n  import Tip from './Tip'\n\n  const directionMap = {\n    top: 'top',\n    bottom: 'bottom',\n    above: 'top',\n    below: 'bottom',\n  }\n\n  export default {\n    name: 'vue-treeselect--menu',\n    inject: [ 'instance' ],\n\n    computed: {\n      menuStyle() {\n        const { instance } = this\n\n        return {\n          maxHeight: instance.maxHeight + 'px',\n        }\n      },\n\n      menuContainerStyle() {\n        const { instance } = this\n\n        return {\n          zIndex: instance.appendToBody ? null : instance.zIndex,\n        }\n      },\n    },\n\n    watch: {\n      'instance.menu.isOpen'(newValue) {\n        if (newValue) {\n          // In case `openMenu()` is just called and the menu is not rendered yet.\n          this.$nextTick(this.onMenuOpen)\n        } else {\n          this.onMenuClose()\n        }\n      },\n    },\n\n    created() {\n      this.menuSizeWatcher = null\n      this.menuResizeAndScrollEventListeners = null\n    },\n\n    mounted() {\n      const { instance } = this\n\n      if (instance.menu.isOpen) this.$nextTick(this.onMenuOpen)\n    },\n\n    destroyed() {\n      this.onMenuClose()\n    },\n\n    methods: {\n      renderMenu() {\n        const { instance } = this\n\n        if (!instance.menu.isOpen) return null\n\n        return (\n          <div ref=\"menu\" class=\"vue-treeselect__menu\" onMousedown={instance.handleMouseDown} style={this.menuStyle}>\n            {this.renderBeforeList()}\n            {instance.async\n              ? this.renderAsyncSearchMenuInner()\n              : instance.localSearch.active\n                ? this.renderLocalSearchMenuInner()\n                : this.renderNormalMenuInner()}\n            {this.renderAfterList()}\n          </div>\n        )\n      },\n\n      renderBeforeList() {\n        const { instance } = this\n        const beforeListRenderer = instance.$scopedSlots['before-list']\n\n        return beforeListRenderer\n          ? beforeListRenderer()\n          : null\n      },\n\n      renderAfterList() {\n        const { instance } = this\n        const afterListRenderer = instance.$scopedSlots['after-list']\n\n        return afterListRenderer\n          ? afterListRenderer()\n          : null\n      },\n\n      renderNormalMenuInner() {\n        const { instance } = this\n\n        if (instance.rootOptionsStates.isLoading) {\n          return this.renderLoadingOptionsTip()\n        } else if (instance.rootOptionsStates.loadingError) {\n          return this.renderLoadingRootOptionsErrorTip()\n        } else if (instance.rootOptionsStates.isLoaded && instance.forest.normalizedOptions.length === 0) {\n          return this.renderNoAvailableOptionsTip()\n        } else {\n          return this.renderOptionList()\n        }\n      },\n\n      renderLocalSearchMenuInner() {\n        const { instance } = this\n\n        if (instance.rootOptionsStates.isLoading) {\n          return this.renderLoadingOptionsTip()\n        } else if (instance.rootOptionsStates.loadingError) {\n          return this.renderLoadingRootOptionsErrorTip()\n        } else if (instance.rootOptionsStates.isLoaded && instance.forest.normalizedOptions.length === 0) {\n          return this.renderNoAvailableOptionsTip()\n        } else if (instance.localSearch.noResults) {\n          return this.renderNoResultsTip()\n        } else {\n          return this.renderOptionList()\n        }\n      },\n\n      renderAsyncSearchMenuInner() {\n        const { instance } = this\n        const entry = instance.getRemoteSearchEntry()\n        const shouldShowSearchPromptTip = instance.trigger.searchQuery === '' && !instance.defaultOptions\n        const shouldShowNoResultsTip = shouldShowSearchPromptTip\n          ? false\n          : entry.isLoaded && entry.options.length === 0\n\n        if (shouldShowSearchPromptTip) {\n          return this.renderSearchPromptTip()\n        } else if (entry.isLoading) {\n          return this.renderLoadingOptionsTip()\n        } else if (entry.loadingError) {\n          return this.renderAsyncSearchLoadingErrorTip()\n        } else if (shouldShowNoResultsTip) {\n          return this.renderNoResultsTip()\n        } else {\n          return this.renderOptionList()\n        }\n      },\n\n      renderOptionList() {\n        const { instance } = this\n\n        return (\n          <div class=\"vue-treeselect__list\">\n            {instance.forest.normalizedOptions.map(rootNode => (\n              <Option node={rootNode} key={rootNode.id} />\n            ))}\n          </div>\n        )\n      },\n\n      renderSearchPromptTip() {\n        const { instance } = this\n\n        return (\n          <Tip type=\"search-prompt\" icon=\"warning\">{ instance.searchPromptText }</Tip>\n        )\n      },\n\n      renderLoadingOptionsTip() {\n        const { instance } = this\n\n        return (\n          <Tip type=\"loading\" icon=\"loader\">{ instance.loadingText }</Tip>\n        )\n      },\n\n      renderLoadingRootOptionsErrorTip() {\n        const { instance } = this\n\n        return (\n          <Tip type=\"error\" icon=\"error\">\n            { instance.rootOptionsStates.loadingError }\n            <a class=\"vue-treeselect__retry\" onClick={instance.loadRootOptions} title={instance.retryTitle}>\n              { instance.retryText }\n            </a>\n          </Tip>\n        )\n      },\n\n      renderAsyncSearchLoadingErrorTip() {\n        const { instance } = this\n        const entry = instance.getRemoteSearchEntry()\n\n        // TODO: retryTitle?\n\n        return (\n          <Tip type=\"error\" icon=\"error\">\n            { entry.loadingError }\n            <a class=\"vue-treeselect__retry\" onClick={instance.handleRemoteSearch} title={instance.retryTitle}>\n              { instance.retryText }\n            </a>\n          </Tip>\n        )\n      },\n\n      renderNoAvailableOptionsTip() {\n        const { instance } = this\n\n        return (\n          <Tip type=\"no-options\" icon=\"warning\">{ instance.noOptionsText }</Tip>\n        )\n      },\n\n      renderNoResultsTip() {\n        const { instance } = this\n\n        return (\n          <Tip type=\"no-results\" icon=\"warning\">{ instance.noResultsText }</Tip>\n        )\n      },\n\n      onMenuOpen() {\n        this.adjustMenuOpenDirection()\n        this.setupMenuSizeWatcher()\n        this.setupMenuResizeAndScrollEventListeners()\n      },\n\n      onMenuClose() {\n        this.removeMenuSizeWatcher()\n        this.removeMenuResizeAndScrollEventListeners()\n      },\n\n      adjustMenuOpenDirection() {\n        const { instance } = this\n        if (!instance.menu.isOpen) return\n\n        const $menu = instance.getMenu()\n        const $control = instance.getControl()\n        const menuRect = $menu.getBoundingClientRect()\n        const controlRect = $control.getBoundingClientRect()\n        const menuHeight = menuRect.height\n        const viewportHeight = window.innerHeight\n        const spaceAbove = controlRect.top\n        const spaceBelow = window.innerHeight - controlRect.bottom\n        const isControlInViewport = (\n          (controlRect.top >= 0 && controlRect.top <= viewportHeight) ||\n          (controlRect.top < 0 && controlRect.bottom > 0)\n        )\n        const hasEnoughSpaceBelow = spaceBelow > menuHeight + MENU_BUFFER\n        const hasEnoughSpaceAbove = spaceAbove > menuHeight + MENU_BUFFER\n\n        if (!isControlInViewport) {\n          instance.closeMenu()\n        } else if (instance.openDirection !== 'auto') {\n          instance.menu.placement = directionMap[instance.openDirection]\n        } else if (hasEnoughSpaceBelow || !hasEnoughSpaceAbove) {\n          instance.menu.placement = 'bottom'\n        } else {\n          instance.menu.placement = 'top'\n        }\n      },\n\n      setupMenuSizeWatcher() {\n        const { instance } = this\n        const $menu = instance.getMenu()\n\n        // istanbul ignore next\n        if (this.menuSizeWatcher) return\n\n        this.menuSizeWatcher = {\n          remove: watchSize($menu, this.adjustMenuOpenDirection),\n        }\n      },\n\n      setupMenuResizeAndScrollEventListeners() {\n        const { instance } = this\n        const $control = instance.getControl()\n\n        // istanbul ignore next\n        if (this.menuResizeAndScrollEventListeners) return\n\n        this.menuResizeAndScrollEventListeners = {\n          remove: setupResizeAndScrollEventListeners($control, this.adjustMenuOpenDirection),\n        }\n      },\n\n      removeMenuSizeWatcher() {\n        if (!this.menuSizeWatcher) return\n\n        this.menuSizeWatcher.remove()\n        this.menuSizeWatcher = null\n      },\n\n      removeMenuResizeAndScrollEventListeners() {\n        if (!this.menuResizeAndScrollEventListeners) return\n\n        this.menuResizeAndScrollEventListeners.remove()\n        this.menuResizeAndScrollEventListeners = null\n      },\n    },\n\n    render() {\n      return (\n        <div ref=\"menu-container\" class=\"vue-treeselect__menu-container\" style={this.menuContainerStyle}>\n          <transition name=\"vue-treeselect__menu--transition\">\n            {this.renderMenu()}\n          </transition>\n        </div>\n      )\n    },\n  }\n</script>\n","var render, staticRenderFns\nimport script from \"./Menu.vue?vue&type=script&lang=js&\"\nexport * from \"./Menu.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  import Vue from 'vue'\n  import { watchSize, setupResizeAndScrollEventListeners, find } from '../utils'\n  import Menu from './Menu'\n\n  const PortalTarget = {\n    name: 'vue-treeselect--portal-target',\n    inject: [ 'instance' ],\n\n    watch: {\n      'instance.menu.isOpen'(newValue) {\n        if (newValue) {\n          this.setupHandlers()\n        } else {\n          this.removeHandlers()\n        }\n      },\n\n      'instance.menu.placement'() {\n        this.updateMenuContainerOffset()\n      },\n    },\n\n    created() {\n      this.controlResizeAndScrollEventListeners = null\n      this.controlSizeWatcher = null\n    },\n\n    mounted() {\n      const { instance } = this\n\n      if (instance.menu.isOpen) this.setupHandlers()\n    },\n\n    methods: {\n      setupHandlers() {\n        this.updateWidth()\n        this.updateMenuContainerOffset()\n        this.setupControlResizeAndScrollEventListeners()\n        this.setupControlSizeWatcher()\n      },\n\n      removeHandlers() {\n        this.removeControlResizeAndScrollEventListeners()\n        this.removeControlSizeWatcher()\n      },\n\n      setupControlResizeAndScrollEventListeners() {\n        const { instance } = this\n        const $control = instance.getControl()\n\n        // istanbul ignore next\n        if (this.controlResizeAndScrollEventListeners) return\n\n        this.controlResizeAndScrollEventListeners = {\n          remove: setupResizeAndScrollEventListeners($control, this.updateMenuContainerOffset),\n        }\n      },\n\n      setupControlSizeWatcher() {\n        const { instance } = this\n        const $control = instance.getControl()\n\n        // istanbul ignore next\n        if (this.controlSizeWatcher) return\n\n        this.controlSizeWatcher = {\n          remove: watchSize($control, () => {\n            this.updateWidth()\n            this.updateMenuContainerOffset()\n          }),\n        }\n      },\n\n      removeControlResizeAndScrollEventListeners() {\n        if (!this.controlResizeAndScrollEventListeners) return\n\n        this.controlResizeAndScrollEventListeners.remove()\n        this.controlResizeAndScrollEventListeners = null\n      },\n\n      removeControlSizeWatcher() {\n        if (!this.controlSizeWatcher) return\n\n        this.controlSizeWatcher.remove()\n        this.controlSizeWatcher = null\n      },\n\n      updateWidth() {\n        const { instance } = this\n        const $portalTarget = this.$el\n        const $control = instance.getControl()\n        const controlRect = $control.getBoundingClientRect()\n\n        $portalTarget.style.width = controlRect.width + 'px'\n      },\n\n      updateMenuContainerOffset() {\n        const { instance } = this\n        const $control = instance.getControl()\n        const $portalTarget = this.$el\n        const controlRect = $control.getBoundingClientRect()\n        const portalTargetRect = $portalTarget.getBoundingClientRect()\n        const offsetY = instance.menu.placement === 'bottom' ? controlRect.height : 0\n        const left = Math.round(controlRect.left - portalTargetRect.left) + 'px'\n        const top = Math.round(controlRect.top - portalTargetRect.top + offsetY) + 'px'\n        const menuContainerStyle = this.$refs.menu.$refs['menu-container'].style\n        const transformVariations = [ 'transform', 'webkitTransform', 'MozTransform', 'msTransform' ]\n        const transform = find(transformVariations, t => t in document.body.style)\n\n        // IE9 doesn't support `translate3d()`.\n        menuContainerStyle[transform] = `translate(${left}, ${top})`\n      },\n    },\n\n    render() {\n      const { instance } = this\n      const portalTargetClass = [ 'vue-treeselect__portal-target', instance.wrapperClass ]\n      const portalTargetStyle = { zIndex: instance.zIndex }\n\n      return (\n        <div class={portalTargetClass} style={portalTargetStyle} data-instance-id={instance.getInstanceId()}>\n          <Menu ref=\"menu\" />\n        </div>\n      )\n    },\n\n    destroyed() {\n      this.removeHandlers()\n    },\n  }\n\n  let placeholder\n\n  export default {\n    name: 'vue-treeselect--menu-portal',\n\n    created() {\n      this.portalTarget = null\n    },\n\n    mounted() {\n      this.setup()\n    },\n\n    destroyed() {\n      this.teardown()\n    },\n\n    methods: {\n      setup() {\n        const el = document.createElement('div')\n        document.body.appendChild(el)\n\n        this.portalTarget = new Vue({\n          el,\n          parent: this,\n          ...PortalTarget,\n        })\n      },\n\n      teardown() {\n        document.body.removeChild(this.portalTarget.$el)\n        this.portalTarget.$el.innerHTML = ''\n\n        this.portalTarget.$destroy()\n        this.portalTarget = null\n      },\n    },\n\n    render() {\n      if (!placeholder) placeholder = (\n        <div class=\"vue-treeselect__menu-placeholder\" />\n      )\n\n      return placeholder\n    },\n  }\n</script>\n","var render, staticRenderFns\nimport script from \"./MenuPortal.vue?vue&type=script&lang=js&\"\nexport * from \"./MenuPortal.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render, staticRenderFns\nimport script from \"./Treeselect.vue?vue&type=script&lang=js&\"\nexport * from \"./Treeselect.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<script>\n  import treeselectMixin from '../mixins/treeselectMixin'\n  import HiddenFields from './HiddenFields'\n  import Control from './Control'\n  import Menu from './Menu'\n  import MenuPortal from './MenuPortal'\n\n  export default {\n    name: 'vue-treeselect',\n    mixins: [ treeselectMixin ],\n\n    computed: {\n      wrapperClass() {\n        return {\n          'vue-treeselect': true,\n          'vue-treeselect--single': this.single,\n          'vue-treeselect--multi': this.multiple,\n          'vue-treeselect--searchable': this.searchable,\n          'vue-treeselect--disabled': this.disabled,\n          'vue-treeselect--focused': this.trigger.isFocused,\n          'vue-treeselect--has-value': this.hasValue,\n          'vue-treeselect--open': this.menu.isOpen,\n          'vue-treeselect--open-above': this.menu.placement === 'top',\n          'vue-treeselect--open-below': this.menu.placement === 'bottom',\n          'vue-treeselect--branch-nodes-disabled': this.disableBranchNodes,\n          'vue-treeselect--append-to-body': this.appendToBody,\n        }\n      },\n    },\n\n    render() {\n      return (\n        <div ref=\"wrapper\" class={this.wrapperClass}>\n          <HiddenFields />\n          <Control ref=\"control\" />\n          {this.appendToBody ? <MenuPortal ref=\"portal\" /> : <Menu ref=\"menu\" />}\n        </div>\n      )\n    },\n  }\n</script>\n","import Treeselect from './components/Treeselect'\nimport treeselectMixin from './mixins/treeselectMixin'\nimport './style.less'\n\nexport default Treeselect\nexport { Treeselect, treeselectMixin }\nexport {\n  // Delayed loading.\n  LOAD_ROOT_OPTIONS,\n  LOAD_CHILDREN_OPTIONS,\n  ASYNC_SEARCH,\n} from './constants'\n\nexport const VERSION = PKG_VERSION\n"],"sourceRoot":""}